/**
* Feature name: BytePlusRTC streaming to CDN
* Function brief description: For an audio & video call, you can combine multiple audio & video streams into one,
* and push the combined audio & video stream to the specified streaming address (usually CDN address)
* Reminder:
* 1. This demo demonstrates the function, confluence and push,
* 1.1 When the layout mode is 1 * 4 (4 views are displayed in one row), the width of each stream is 0.25 and the height is 1.
* 1.2 When the layout mode is 2 * 2 (four-square grid), the width of each channel is 0.5 and the height is 0.5.
* 1.3 Show up to 4 streams in the room
* 2. To demonstrate, all functional tokens are generated by the client side TokenGenerator class, please depend on the specific situation when actually accessing
* Reference document: https://docs.byteplus.com/en/docs/byteplus-rtc/docs-69817
*/

import UIKit
import SnapKit
import BytePlusRTC

class PushCDNViewController: BaseViewController, ByteRTCVideoDelegate, ByteRTCRoomDelegate,ByteRTCMixedStreamObserver {
    
    var rtcVideo: ByteRTCVideo?
    var rtcRoom: ByteRTCRoom?
    var users : Array = Array<ByteRTCRemoteStreamKey>()
    var mixConfig: ByteRTCMixedStreamConfig?
    let taskId = "pushCDNtaskId_001"
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        self.createUI()
        self.buildRTCEngine()
        self.buildActions()
    }
    
    deinit {
        self.rtcRoom?.leaveRoom()
        self.rtcRoom?.destroy()
        self.rtcRoom = nil
        
        ByteRTCVideo.destroyRTCVideo()
        self.rtcVideo = nil
    }
    
    // MARK: Private method
    
    @objc func joinRoom()  {
        let roomId = self.roomSettingItem.text ?? ""
        let userId = self.userSettingItem.text ?? ""
        
        var vaild = checkValid(roomId)
        if vaild == false {
            ToastComponents.shared.show(withMessage: LocalizedString("toast_check_valid_false"))
            return
        }
        
        vaild = checkValid(userId)
        if vaild == false {
            ToastComponents.shared.show(withMessage: LocalizedString("toast_check_valid_false"))
            return
        }
        
        joinButton.isSelected = !joinButton.isSelected
        
        if joinButton.isSelected {
            generatorToken(roomId: roomId, userId: userId) { [weak self] token in
                self?.joinButton.setTitle(LocalizedString("button_leave_room"), for: .normal)
                
                // Join room
                self?.rtcRoom = self?.rtcVideo?.createRTCRoom(roomId)
                self?.rtcRoom?.delegate = self
                
                let userInfo = ByteRTCUserInfo.init()
                userInfo.userId = userId
                
                let roomCfg = ByteRTCRoomConfig.init()
                roomCfg.isAutoPublish = true
                roomCfg.isAutoSubscribeAudio = true
                roomCfg.isAutoSubscribeVideo = true
                
                self?.rtcRoom?.joinRoom(token, userInfo: userInfo, roomConfig: roomCfg)
            }
        } else {
            self.joinButton.setTitle(LocalizedString("button_join_room"), for: .normal)
            self.rtcRoom?.leaveRoom()
        }
    }
    
    func buildRTCEngine() {
        // Create engine
        self.rtcVideo = ByteRTCVideo.createRTCVideo(kAppID, delegate: self, parameters: [:])
        
        // Enable local audio and video collection
        self.rtcVideo?.startVideoCapture()
        self.rtcVideo?.startAudioCapture()
        
        // Enable local preview
        self.bindLocalRenderView()
        
        // Set default merge parameters
        self.mixConfig = ByteRTCMixedStreamConfig.default()
        self.mixConfig?.layoutConfig.backgroundColor = "#FFFFFF"

    }
    
    @objc func startPushCDN()  {
        if let text = self.urlTextField.text, !text.isEmpty {
            self.mixConfig?.pushURL = self.urlTextField.text
            
            let roomId = roomSettingItem.text
            let userId = userSettingItem.text
            
            self.mixConfig?.layoutConfig.regions = self.getMixRegions()
            
            self.mixConfig?.roomID = roomId!
            self.mixConfig?.userID = userId!
            
            self.rtcVideo?.startPushMixedStream(toCDN: taskId, mixedConfig: self.mixConfig, observer: self)
        } else {
            ToastComponents.shared.show(withMessage: LocalizedString("无效的推流地址"))
        }
    }
    
    @objc func updatePushConfig()  {
        // Update layout
        self.mixConfig?.layoutConfig.regions = self.getMixRegions()

        self.rtcVideo?.updatePushMixedStream(toCDN: taskId, mixedConfig: self.mixConfig!)
    }
    
    @objc func stopPushCDN()  {
        self.rtcVideo?.stopPushStreamToCDN(taskId)
    }
    
    @objc func scrollViewAction()  {
        self.view.endEditing(true)
    }
    
    func getMixRegions() -> [ByteRTCMixedStreamLayoutRegionConfig] {
        let roomId = roomSettingItem.text
        let userId = userSettingItem.text
        
        var regions = [ByteRTCMixedStreamLayoutRegionConfig]()
        if self.layoutSheetView.selectedIndex == 0 {
            // 1x4 layout
            
            // Local perspective user
            let regionConfig = ByteRTCMixedStreamLayoutRegionConfig.init()
            regionConfig.userID = userId!
            regionConfig.roomID = roomId!
            regionConfig.locationX = 0
            regionConfig.locationY = 0
            regionConfig.widthProportion = 0.25
            regionConfig.heightProportion = 1.0
            regionConfig.zOrder = 0
            regionConfig.isLocalUser = true
            regionConfig.mediaType = .audioAndVideo
            
            regions.append(regionConfig)
            
            // Remote user
            for (index, item) in self.users.enumerated() {
                if index < 3 {
                    let regionConfig = ByteRTCMixedStreamLayoutRegionConfig.init()
                    regionConfig.userID = item.userId!
                    regionConfig.roomID = item.roomId!
                    
                    regionConfig.locationX = 0.25 * (CGFloat(index) + 1.0)
                    regionConfig.locationY = 0
                    regionConfig.widthProportion = 0.25
                    regionConfig.heightProportion = 1
                    regionConfig.zOrder = 0
                    regionConfig.isLocalUser = false
                    regionConfig.mediaType = .audioAndVideo
                    
                    regions.append(regionConfig)
                }
            }
        } else {
            // 2x2 layout
            
            // Local perspective user
            let regionConfig = ByteRTCMixedStreamLayoutRegionConfig.init()
            regionConfig.userID = userId!
            regionConfig.roomID = roomId!
            regionConfig.locationX = 0
            regionConfig.locationY = 0
            regionConfig.widthProportion = 0.5
            regionConfig.heightProportion = 0.5
            regionConfig.zOrder = 0
            regionConfig.isLocalUser = true
            regionConfig.mediaType = .audioAndVideo
            
            regions.append(regionConfig)
            
            // Remote user
            for (index, item) in self.users.enumerated() {
                if index < 3 {
                    let regionConfig = ByteRTCMixedStreamLayoutRegionConfig.init()
                    regionConfig.userID = item.userId!
                    regionConfig.roomID = item.roomId!
                    
                    let col = (index + 1) % 2
                    let row = (index + 1) / 2
                    
                    regionConfig.locationX = 0.5 * CGFloat(col)
                    regionConfig.locationY = 0.5 * CGFloat(row)
                    regionConfig.widthProportion = 0.5
                    regionConfig.heightProportion = 0.5
                    regionConfig.zOrder = 0
                    regionConfig.isLocalUser = false
                    regionConfig.mediaType = .audioAndVideo
                    
                    regions.append(regionConfig)
                }
            }
        }
        
        return regions
    }
    
    func buildActions() {
        weak var weakSelf = self
        
        // Audio sample rate
        self.audioSampleRateSheetView.didSelectOption = {(value) in
            var sampleRate = 48000
            
            switch value {
            case 0:
                sampleRate = 48000
            case 1:
                sampleRate = 44100
            case 2:
                sampleRate = 32000
            default:
                sampleRate = 48000
            }
            
            weakSelf?.mixConfig?.audioConfig.sampleRate = sampleRate
        }
        
        // Number of channels
        self.audioChannelSheetView.didSelectOption = {(value) in
            var channels = 2
            
            switch value {
            case 0:
                channels = 2
            case 1:
                channels = 1
            default:
                channels = 2
            }
            
            weakSelf?.mixConfig?.audioConfig.channels = channels
        }
        
        // Audio bit rate
        self.audioBitrateSettingItem.onValueChanged = {(value) in
            
            weakSelf?.mixConfig?.audioConfig.bitrate = Int(value) ?? 64
        }
        
        // Audio encoding specifications
        self.audioProfileSheetView.didSelectOption = {(value) in
            var profile:ByteRTCMixedStreamAudioProfile = .LC
            
            switch value {
            case 0:
                profile = .LC
            case 1:
                profile = .hEv1
            case 2:
                profile = .hEv2
            default:
                profile = .LC
            }
            
            weakSelf?.mixConfig?.audioConfig.audioProfile = profile
        }
        
        // Video width
        self.videoWidthSettingItem.onValueChanged = {(value) in
            guard let intValue = Int(value) else {
                return
            }
            weakSelf?.mixConfig?.videoConfig.width = intValue
        }
        
        // Video height
        self.videoHeightSettingItem.onValueChanged = {(value) in
            guard let intValue = Int(value) else {
                return
            }
            weakSelf?.mixConfig?.videoConfig.height = intValue
        }
        
        // Background color
        self.backgroundSettingItem.onValueChanged = {(value) in
            weakSelf?.mixConfig?.layoutConfig.backgroundColor = value
        }
        
        // Frame rate
        self.videoFpsSettingItem.onValueChanged = {(value) in
            guard let intValue = Int(value) else {
                return
            }
            weakSelf?.mixConfig?.videoConfig.fps = intValue
        }
        
        // Code rate
        self.videoBitrateSettingItem.onValueChanged = {(value) in
            guard let intValue = Int(value) else {
                return
            }
            weakSelf?.mixConfig?.videoConfig.bitrate = intValue
        }
        
        // Encoding format
        self.videoCodecSheetView.didSelectOption = {(value) in
            var codec:ByteRTCMixedStreamVideoCodecType = .H264
            
            switch value {
            case 0:
                codec = .H264
            case 1:
                codec = .byteVC1
            default:
                codec = .H264
            }
            
            weakSelf?.mixConfig?.videoConfig.videoCodec = codec
        }
        
        // Layout mode: 1*4 or 2*2
        self.layoutSheetView.didSelectOption = {(value) in
            weakSelf?.mixConfig?.layoutConfig.regions = (weakSelf?.getMixRegions())!
        }
    }
    
    func bindLocalRenderView() {
        // Set the local rendering view
        let canvas = ByteRTCVideoCanvas.init()
        canvas.view = self.localView.videoView
        canvas.renderMode = .hidden
        self.localView.userId = userSettingItem.text ?? ""
        
        self.rtcVideo?.setLocalVideoCanvas(.main, withCanvas: canvas);
    }
    
    func updateRenderView() {
        // Get the first user of the room
        var remoteUser:ByteRTCRemoteStreamKey?
        
        for streamKey in self.users {
            if remoteUser == nil && streamKey.roomId ==  self.roomSettingItem.text {
                remoteUser = streamKey
            }
        }
        
        if (remoteUser != nil) {
            self.bindRemoteRenderView(view: self.firstRemoteView,roomId: (remoteUser?.roomId)!,userId: (remoteUser?.userId)!)
        }
    }
    
    func bindRemoteRenderView(view: UserVideoView, roomId: String, userId: String) {
        // Set the remote user video rendering view
        let canvas = ByteRTCVideoCanvas.init()
        canvas.view = view.videoView
        canvas.renderMode = .hidden
        view.userId = userId
        
        let streamKey = ByteRTCRemoteStreamKey.init()
        streamKey.userId = userId
        streamKey.roomId = roomId;
        streamKey.streamIndex = .main
        
        self.rtcVideo?.setRemoteVideoCanvas(streamKey, withCanvas: canvas)
    }
    
    func createUI() -> Void {
        self.view.addSubview(scrollView)
        scrollView.snp.makeConstraints { make in
            make.top.equalTo(topView.snp.bottom)
            make.left.right.bottom.equalToSuperview()
        }
        
        let view = UIView()
        scrollView.addSubview(view)
        
        view.snp.makeConstraints { make in
            make.edges.equalToSuperview()
            make.width.equalToSuperview()
        }

        view.addSubview(containerView)
        containerView.snp.makeConstraints { make in
            make.top.left.right.equalToSuperview()
            make.height.equalTo(scrollView).multipliedBy(0.4)
        }
        
        containerView.addSubview(localView)
        containerView.addSubview(firstRemoteView)
        
        localView.snp.makeConstraints { make in
            make.left.top.equalTo(self.containerView)
            make.width.equalTo(self.containerView).multipliedBy(0.5)
            make.height.equalTo(self.containerView)
        }
        
        firstRemoteView.snp.makeConstraints { make in
            make.right.top.equalTo(self.containerView)
            make.width.equalTo(self.containerView).multipliedBy(0.5)
            make.height.equalTo(self.containerView)        }
        
        view.addSubview(roomSettingItem)
        view.addSubview(userSettingItem)
        view.addSubview(joinButton)
        
        roomSettingItem.snp.makeConstraints { make in
            make.top.equalTo(containerView.snp.bottom).offset(10)
            make.left.equalToSuperview().offset(10)
            make.height.equalTo(30)
        }
        
        userSettingItem.snp.makeConstraints { make in
            make.centerY.equalTo(roomSettingItem)
            make.left.equalTo(roomSettingItem.snp.right).offset(20)
            make.right.equalToSuperview().offset(-10)
            make.width.height.equalTo(roomSettingItem)
        }
        
        joinButton.snp.makeConstraints { make in
            make.top.equalTo(roomSettingItem.snp.bottom).offset(20)
            make.left.equalToSuperview().offset(10)
            make.right.equalToSuperview().offset(-10)
            make.height.equalTo(36)
        }
        
        view.addSubview(actionLabel)
        view.addSubview(startPushButton)
        view.addSubview(updatePushButton)
        view.addSubview(stopPushButton)
        
        actionLabel.snp.makeConstraints { make in
            make.top.equalTo(joinButton.snp.bottom).offset(20)
            make.left.equalToSuperview().offset(10)
        }
        
        startPushButton.snp.makeConstraints { make in
            make.top.equalTo(actionLabel.snp.bottom).offset(10)
            make.left.equalToSuperview().offset(10)
            make.height.equalTo(36)
        }
        
        updatePushButton.snp.makeConstraints { make in
            make.centerY.equalTo(startPushButton)
            make.left.equalTo(startPushButton.snp.right).offset(20)
            make.width.height.equalTo(startPushButton)
        }
        
        stopPushButton.snp.makeConstraints { make in
            make.centerY.equalTo(startPushButton)
            make.left.equalTo(updatePushButton.snp.right).offset(20)
            make.right.equalToSuperview().offset(-10)
            make.width.height.equalTo(startPushButton)
        }
        
        view.addSubview(pushConfigLabel)
        view.addSubview(urlTextField)
        
        pushConfigLabel.snp.makeConstraints { make in
            make.top.equalTo(startPushButton.snp.bottom).offset(20)
            make.left.equalToSuperview().offset(10)
        }
        
        urlTextField.snp.makeConstraints { make in
            make.top.equalTo(pushConfigLabel.snp.bottom).offset(10)
            make.left.equalToSuperview().offset(10)
            make.height.equalTo(30)
            make.right.equalToSuperview().offset(-10)
        }
        
        view.addSubview(audioConfigLabel)
        view.addSubview(audioBitrateSettingItem)
        view.addSubview(audioSampleRateSheetView)
        view.addSubview(audioChannelSheetView)
        view.addSubview(audioBitrateSettingItem)
        view.addSubview(audioProfileSheetView)
        view.addSubview(audioCodecSheetView)
        
        audioConfigLabel.snp.makeConstraints { make in
            make.top.equalTo(urlTextField.snp.bottom).offset(20)
            make.left.equalToSuperview().offset(10)
        }
        
        audioBitrateSettingItem.snp.makeConstraints { make in
            make.top.equalTo(audioConfigLabel.snp.bottom).offset(10)
            make.left.equalToSuperview().offset(10)
        }
        
        audioSampleRateSheetView.snp.makeConstraints { make in
            make.top.equalTo(audioBitrateSettingItem.snp.bottom).offset(10)
            make.left.equalToSuperview().offset(10)
            make.right.equalToSuperview().offset(-10)
        }
        
        audioChannelSheetView.snp.makeConstraints { make in
            make.top.equalTo(audioSampleRateSheetView.snp.bottom).offset(10)
            make.left.equalToSuperview().offset(10)
            make.right.equalToSuperview().offset(-10)
        }
        
        view.addSubview(audioProfileSheetView)
        view.addSubview(audioCodecSheetView)
        
        audioProfileSheetView.snp.makeConstraints { make in
            make.top.equalTo(audioChannelSheetView.snp.bottom).offset(10)
            make.left.equalToSuperview().offset(10)
            make.right.equalToSuperview().offset(-10)
        }
        
        audioCodecSheetView.snp.makeConstraints { make in
            make.top.equalTo(audioProfileSheetView.snp.bottom).offset(10)
            make.left.equalToSuperview().offset(10)
            make.right.equalToSuperview().offset(-10)
        }
        
        view.addSubview(videoConfigLabel)
        view.addSubview(videoWidthSettingItem)
        view.addSubview(videoHeightSettingItem)
        view.addSubview(videoFpsSettingItem)
        view.addSubview(videoBitrateSettingItem)
        view.addSubview(backgroundSettingItem)
        view.addSubview(videoCodecSheetView)
        
        videoConfigLabel.snp.makeConstraints { make in
            make.top.equalTo(audioCodecSheetView.snp.bottom).offset(20)
            make.left.equalToSuperview().offset(10)
        }
        
        videoWidthSettingItem.snp.makeConstraints { make in
            make.top.equalTo(videoConfigLabel.snp.bottom).offset(10)
            make.left.equalToSuperview().offset(10)
        }
        
        videoHeightSettingItem.snp.makeConstraints { make in
            make.top.equalTo(videoWidthSettingItem.snp.bottom).offset(20)
            make.left.equalToSuperview().offset(10)
        }
        
        videoFpsSettingItem.snp.makeConstraints { make in
            make.top.equalTo(videoHeightSettingItem.snp.bottom).offset(20)
            make.left.equalToSuperview().offset(10)
        }
        
        videoBitrateSettingItem.snp.makeConstraints { make in
            make.top.equalTo(videoFpsSettingItem.snp.bottom).offset(20)
            make.left.equalToSuperview().offset(10)
        }
        
        videoCodecSheetView.snp.makeConstraints { make in
            make.top.equalTo(videoBitrateSettingItem.snp.bottom).offset(10)
            make.left.equalToSuperview().offset(10)
            make.right.equalToSuperview().offset(-10)
        }
        
        backgroundSettingItem.snp.makeConstraints { make in
            make.top.equalTo(videoCodecSheetView.snp.bottom).offset(10)
            make.left.equalToSuperview().offset(10)
        }

        view.addSubview(layoutLabel)
        view.addSubview(layoutSheetView)
        
        layoutLabel.snp.makeConstraints { make in
            make.top.equalTo(backgroundSettingItem.snp.bottom).offset(20)
            make.left.equalToSuperview().offset(10)
        }
        
        layoutSheetView.snp.makeConstraints { make in
            make.top.equalTo(layoutLabel.snp.bottom).offset(10)
            make.left.equalToSuperview().offset(10)
            make.right.equalToSuperview().offset(-10)
            make.bottom.equalToSuperview().offset(-10)
        }
    }
    
    // MARK: Lazy laod
    lazy var scrollView: UIScrollView = {
        let scrollView = UIScrollView()
        scrollView.showsVerticalScrollIndicator = false
        scrollView.isUserInteractionEnabled = true
        let tap = UITapGestureRecognizer(target: self, action: #selector(scrollViewAction))
        scrollView.addGestureRecognizer(tap)
        return scrollView
    }()
    
    lazy var roomSettingItem: TextFieldView = {
        let settingView = TextFieldView()
        settingView.title = LocalizedString("hint_room_id")
        return settingView
    }()
    
    lazy var userSettingItem: TextFieldView = {
        let settingView = TextFieldView()
        settingView.title = LocalizedString("hint_user_id")
        return settingView
    }()
    
    lazy var joinButton: UIButton = {
        let button = BaseButton()
        button.setTitle(LocalizedString("button_join_room"), for: .normal)
        button.addTarget(self, action: #selector(joinRoom), for: .touchUpInside)
        return button
    }()
    
    lazy var actionLabel: UILabel = {
        let label = UILabel.init()
        label.text = LocalizedString("label_transcoding")
        label.font = UIFont.boldSystemFont(ofSize: 18)
        return label
    }()
    
    lazy var startPushButton: UIButton = {
        let button = BaseButton()
        button.setTitle(LocalizedString("button_start_transcoding"), for: .normal)
        button.titleLabel?.font = UIFont.systemFont(ofSize: 14)
        button.titleLabel?.adjustsFontSizeToFitWidth = true
        button.titleLabel?.numberOfLines = 2
        button.titleLabel?.textAlignment = .center
        button.addTarget(self, action: #selector(startPushCDN), for: .touchUpInside)
        return button
    }()
    
    lazy var updatePushButton: UIButton = {
        let button = BaseButton()
        button.setTitle(LocalizedString("button_update_transcoding"), for: .normal)
        button.titleLabel?.font = UIFont.systemFont(ofSize: 14)
        button.titleLabel?.adjustsFontSizeToFitWidth = true
        button.titleLabel?.numberOfLines = 2
        button.titleLabel?.textAlignment = .center
        button.addTarget(self, action: #selector(updatePushConfig), for: .touchUpInside)
        return button
    }()
    
    lazy var stopPushButton: UIButton = {
        let button = BaseButton()
        button.setTitle(LocalizedString("button_stop_transcoding"), for: .normal)
        button.titleLabel?.font = UIFont.systemFont(ofSize: 14)
        button.titleLabel?.adjustsFontSizeToFitWidth = true
        button.titleLabel?.numberOfLines = 2
        button.titleLabel?.textAlignment = .center
        button.addTarget(self, action: #selector(stopPushCDN), for: .touchUpInside)
        return button
    }()
    
    lazy var pushConfigLabel: UILabel = {
        let label = UILabel.init()
        label.text = LocalizedString("label_setting_push")
        label.font = actionLabel.font

        return label
    }()
    
    lazy var urlTextField: TextFieldView = {
        let textField = TextFieldView()
        textField.title = LocalizedString("hint_cdn_url")
        if let cdnUrl = kCDNUrl as String?, !cdnUrl.isEmpty {
            textField.text = cdnUrl
        } else {
            RTCTokenProtocol().getRTMPAddr(taskId) { [weak textField] addr in
                textField?.text = addr
            }
        }
        
        textField.inputTextField.keyboardType = .URL
        return textField
    }()
    
    lazy var audioConfigLabel: UILabel = {
        let label = UILabel.init()
        label.text = LocalizedString("label_setting_audio")
        label.font = actionLabel.font
        return label
    }()
    
    lazy var audioSampleRateSheetView: ActionSheetView = {
        let actionSheetView = ActionSheetView.init(title: LocalizedString("button_audio_sample_rate"), optionArray: ["48000","44100","32000"], defaultIndex: 0)
        actionSheetView.presentingViewController = self
        
        return actionSheetView
    }()
    
    lazy var audioChannelSheetView: ActionSheetView = {
        let actionSheetView = ActionSheetView.init(title: LocalizedString("button_audio_channel"), optionArray: ["2","1"], defaultIndex: 0)
        actionSheetView.presentingViewController = self
        
        return actionSheetView
    }()
    
    lazy var audioBitrateSettingItem: SettingItemView = {
        let settingView = SettingItemView()
        settingView.title = LocalizedString("label_setting_rate_Kbps")
        return settingView
    }()
    
    lazy var audioProfileSheetView: ActionSheetView = {
        let actionSheetView = ActionSheetView.init(title: LocalizedString("button_audio_encoding_specifications"), optionArray: ["LC","HEv1","HEv2"], defaultIndex: 0)
        actionSheetView.presentingViewController = self
        
        return actionSheetView
    }()
    
    lazy var audioCodecSheetView: ActionSheetView = {
        let actionSheetView = ActionSheetView.init(title: LocalizedString("button_audio_encoding_format"), optionArray: ["AAC"], defaultIndex: 0)
        actionSheetView.presentingViewController = self
        
        return actionSheetView
    }()
    
    lazy var videoConfigLabel: UILabel = {
        let label = UILabel.init()
        label.text = LocalizedString("label_setting_video")
        label.font = actionLabel.font
        return label
    }()
    
    lazy var videoWidthSettingItem: SettingItemView = {
        let settingView = SettingItemView()
        settingView.title = LocalizedString("label_setting_width")
        return settingView
    }()
    
    lazy var videoHeightSettingItem: SettingItemView = {
        let settingView = SettingItemView()
        settingView.title = LocalizedString("label_setting_height")
        return settingView
    }()
    
    lazy var videoFpsSettingItem: SettingItemView = {
        let settingView = SettingItemView()
        settingView.title = LocalizedString("label_setting_fps")
        return settingView
    }()
    
    lazy var videoBitrateSettingItem: SettingItemView = {
        let settingView = SettingItemView()
        settingView.title = LocalizedString("label_setting_rate")
        return settingView
    }()
    
    lazy var backgroundSettingItem: SettingItemView = {
        let settingView = SettingItemView()
        settingView.title = LocalizedString("label_setting_bg_color")
        settingView.inputTextField.keyboardType = .default
        settingView.inputTextField.placeholder = "#FFFFFF"

        return settingView
    }()
    
    lazy var videoCodecSheetView: ActionSheetView = {
        let actionSheetView = ActionSheetView.init(title: LocalizedString("button_video_encoding_format"), optionArray: ["H264","ByteVC1"], defaultIndex: 0)
        actionSheetView.presentingViewController = self
        
        return actionSheetView
    }()
    
    lazy var layoutLabel: UILabel = {
        let label = UILabel.init()
        label.text = LocalizedString("button_layout_mode")
        label.font = actionLabel.font
        return label
    }()
    
    lazy var layoutSheetView: ActionSheetView = {
        let actionSheetView = ActionSheetView.init(title: LocalizedString("button_layout_mode"), optionArray: ["1x4","2x2"], defaultIndex: 0)
        actionSheetView.presentingViewController = self
        
        return actionSheetView
    }()
    
    lazy var containerView: UIView = {
        let view = UIView.init()
        view.backgroundColor = .groupTableViewBackground
        return view
    }()
    
    lazy var localView: UserVideoView = {
        let view = UserVideoView.init()
        return view
    }()
    
    lazy var firstRemoteView: UserVideoView = {
        let view = UserVideoView.init()
        return view
    }()
    
    // MARK: ByteRTCVideoDelegate & ByteRTCRoomDelegate
    func rtcRoom(_ rtcRoom: ByteRTCRoom, onRoomStateChanged roomId: String, withUid uid: String, state: Int, extraInfo: String) {
        ToastComponents.shared.show(withMessage: "onRoomStateChanged uid: \(uid) state:\(state)")
        
    }
    
    // Remote user publishing stream
    func rtcRoom(_ rtcRoom: ByteRTCRoom, onUserPublishStream userId: String, type: ByteRTCMediaStreamType) {
        ToastComponents.shared.show(withMessage: "onUserPublishStream uid: \(userId)")
        
        if type == .video || type == .both {
            
            let streamKey = ByteRTCRemoteStreamKey.init()
            streamKey.userId = userId
            streamKey.roomId = rtcRoom.getId();
            streamKey.streamIndex = .main
            
            self.users.append(streamKey)
            
            DispatchQueue.main.async {
                self.updateRenderView()
            }
        }
    }
    
    // Remote user cancels publishing flow
    func rtcRoom(_ rtcRoom: ByteRTCRoom, onUserUnpublishStream userId: String, type: ByteRTCMediaStreamType, reason: ByteRTCStreamRemoveReason) {
        ToastComponents.shared.show(withMessage: "onUserUnpublishStream uid: \(userId)")
        
        if type == .video || type == .both {
            
            // Remove from self.users
            var itemsToRemove: [ByteRTCRemoteStreamKey] = []
            
            for streamKey in self.users {
                if streamKey.userId == userId {
                    itemsToRemove.append(streamKey)
                }
            }
            
            for item in itemsToRemove {
                if let index = self.users.firstIndex(of: item) {
                    self.users.remove(at: index)
                }
            }
            
            DispatchQueue.main.async {
                for videoView in self.containerView.subviews {
                    if let view = videoView as? UserVideoView {
                        let userId = view.userId
                        
                        if userId == userId {
                            view.userId = ""
                        }
                    }
                }
            }
            
            DispatchQueue.main.async {
                self.updateRenderView()
            }
        }
    }
    
    // Remote users join the room
    func rtcRoom(_ rtcRoom: ByteRTCRoom, onUserJoined userInfo: ByteRTCUserInfo, elapsed: Int) {
        ToastComponents.shared.show(withMessage: "onUserJoined uid: \(userInfo.userId)")
        
    }
    
    // The remote user leaves the room
    func rtcRoom(_ rtcRoom: ByteRTCRoom, onUserLeave uid: String, reason: ByteRTCUserOfflineReason) {
        ToastComponents.shared.show(withMessage: "onUserLeave uid: \(uid)")
        
    }
    
    // MARK: ByteRTCMixedStreamObserver
    func isSupportClientPushStream() -> Bool {
        return false
    }
    
    // Confluence event callback
    func onMixingEvent(_ event: ByteRTCStreamMixingEvent, taskId: String, error errorCode: ByteRTCStreamMixingErrorCode, mix mixType: ByteRTCMixedStreamType) {
        ToastComponents.shared.show(withMessage: "onMixingEvent:\(event.rawValue) taskId:\(taskId) errorCode:\(errorCode.rawValue) + mixType:\(mixType.rawValue)")
    }
}
