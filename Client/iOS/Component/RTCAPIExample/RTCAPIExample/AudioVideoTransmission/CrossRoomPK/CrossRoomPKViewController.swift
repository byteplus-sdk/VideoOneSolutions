/*
* Function name: BytePlusRTC cross-room retweet
Function brief description: Forwarding media streams across rooms means that visible users' media streams can be forwarded to multiple RTC rooms simultaneously.
The number of forwarding target rooms is not limited on the RTC side.
* Reminder:
* 1. To demonstrate, all functional tokens are generated by the client side TokenGenerator class, please depend on the specific situation when actually accessing
* Reference document: https://docs.byteplus.com/en/docs/byteplus-rtc/docs-104398
*/


import UIKit
import SnapKit
import BytePlusRTC

@objc(CrossRoomPKViewController)
class CrossRoomPKViewController: BaseViewController, ByteRTCVideoDelegate, ByteRTCRoomDelegate {
    var rtcVideo: ByteRTCVideo?
    var rtcRoom: ByteRTCRoom?
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        self.createUI()
        self.buildRTCEngine()
    }
    
    
    deinit {
        self.rtcRoom?.leaveRoom()
        self.rtcRoom?.destroy()
        self.rtcRoom = nil
        
        ByteRTCVideo.destroyRTCVideo()
        self.rtcVideo = nil
    }
    
    // MARK: Private method
    
    @objc func joinRoom()  {
        let roomId = self.roomTextField.text ?? ""
        let userId = self.userTextField.text ?? ""
        
        var vaild = checkValid(roomId)
        if vaild == false {
            ToastComponents.shared.show(withMessage: LocalizedString("toast_check_valid_false"))
            return
        }
        
        vaild = checkValid(userId)
        if vaild == false {
            ToastComponents.shared.show(withMessage: LocalizedString("toast_check_valid_false"))
            return
        }
        
        let roomId2 = self.forwardRoomTextField.text ?? ""
        
        if roomId == roomId2 {
            ToastComponents.shared.show(withMessage: LocalizedString("toast_room_id_false"))
            return
        }
        
        joinButton.isSelected = !joinButton.isSelected
        
        if joinButton.isSelected {
            generatorToken(roomId: roomId, userId: userId) { [weak self] token in
                self?.joinButton.setTitle(LocalizedString("button_leave_room"), for: .normal)
                
                // Join room
                self?.rtcRoom = self?.rtcVideo?.createRTCRoom(roomId)
                self?.rtcRoom?.delegate = self
                
                let userInfo = ByteRTCUserInfo.init()
                userInfo.userId = userId
                
                let roomCfg = ByteRTCRoomConfig.init()
                roomCfg.isAutoPublish = true
                roomCfg.isAutoSubscribeAudio = true
                roomCfg.isAutoSubscribeVideo = true
                
                self?.rtcRoom?.joinRoom(token, userInfo: userInfo, roomConfig: roomCfg)
            }
        }
        else {
            self.joinButton.setTitle(LocalizedString("button_join_room"), for: .normal)
            self.rtcRoom?.leaveRoom()
        }
        
    }
    
    @objc func startforward()  {
        let roomId = self.forwardRoomTextField.text ?? ""
        if checkValid(roomId) == false {
            ToastComponents.shared.show(withMessage: LocalizedString("toast_check_valid_false"))
            return
        }
        
        let userId = userTextField.text!
        generatorToken(roomId: roomId, userId: userId) { [weak self] token in
            let config = ByteRTCForwardStreamConfiguration.init()
            config.roomId = roomId
            config.token = token
            
            // Supports retweeting to multiple rooms, just pass multiple configs in the array
            self?.rtcRoom?.startForwardStreamToRooms([config])
        }
    }
    
    @objc func updateforward()  {
        let roomId = self.forwardRoomTextField.text ?? ""
        
        let vaild = checkValid(roomId)
        if vaild == false {
            ToastComponents.shared.show(withMessage: LocalizedString("toast_check_valid_false"))
            return
        }
        
        let userId = userTextField.text!
        generatorToken(roomId: roomId, userId: userId) { [weak self] token in
            let config = ByteRTCForwardStreamConfiguration.init()
            config.roomId = roomId
            config.token = token
            
            // Supports retweeting to multiple rooms, just pass multiple configs in the array
            self?.rtcRoom?.updateForwardStreamToRooms([config])
        }
    }
    
    @objc func pauseforward()  {
        self.rtcRoom?.pauseForwardStreamToAllRooms()
    }
    
    @objc func resumeforward()  {
        self.rtcRoom?.resumeForwardStreamToAllRooms()
    }
    
    @objc func stopforward()  {
        self.rtcRoom?.stopForwardStreamToRooms()
    }
    
    func buildRTCEngine() {
        // Create engine
        self.rtcVideo = ByteRTCVideo.createRTCVideo(kAppID, delegate: self, parameters: [:])
        
        // Enable local audio and video collection
        self.rtcVideo?.startVideoCapture()
        self.rtcVideo?.startAudioCapture()
        
        self.bindLocalRenderView()
    }
    
    func bindLocalRenderView() {
        // Set local rendering view
        let canvas = ByteRTCVideoCanvas.init()
        canvas.view = self.localView.videoView
        canvas.renderMode = .hidden
        self.localView.userId = userTextField.text ?? ""
        
        self.rtcVideo?.setLocalVideoCanvas(.main, withCanvas: canvas);
    }
    
    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
        self.view.endEditing(true)
    }
    
    func createUI() -> Void {
        view.addSubview(containerView)
        self.containerView.addSubview(localView)
        
        containerView.snp.makeConstraints { make in
            make.top.equalTo(topView.snp.bottom)
            make.left.right.equalTo(self.view)
        }
        
        self.localView.snp.makeConstraints { make in
            make.left.top.equalTo(self.containerView)
            make.width.height.equalTo(self.containerView)
        }
        
        view.addSubview(roomLabel)
        view.addSubview(roomTextField)
        view.addSubview(userLabel)
        view.addSubview(userTextField)
        view.addSubview(joinButton)
        
        roomLabel.snp.makeConstraints { make in
            make.top.equalTo(containerView.snp.bottom).offset(20)
            make.left.equalToSuperview().offset(10)
        }
        
        roomTextField.snp.makeConstraints { make in
            make.centerY.equalTo(roomLabel)
            make.left.equalTo(roomLabel.snp.right).offset(10)
            make.width.equalTo(100)
            make.height.equalTo(30)
        }
        
        userLabel.snp.makeConstraints { make in
            make.centerY.equalTo(roomLabel)
        }
        
        userTextField.snp.makeConstraints { make in
            make.centerY.equalTo(roomLabel)
            make.left.equalTo(userLabel.snp.right).offset(10)
            make.right.equalTo(self.view).offset(-10)
            make.width.equalTo(100)
            make.height.equalTo(30)
        }
        
        joinButton.snp.makeConstraints { make in
            make.top.equalTo(roomLabel.snp.bottom).offset(20)
            make.left.equalTo(roomLabel)
            make.right.equalTo(self.view).offset(-10)
            make.height.equalTo(36)
        }
        
        view.addSubview(forwardRoomLabel)
        view.addSubview(forwardRoomTextField)
        view.addSubview(startforwardButton)
        view.addSubview(updateforwardButton)
        view.addSubview(pauseforwardButton)
        view.addSubview(resumeforwardButton)
        view.addSubview(stopforwardButton)
        
        forwardRoomLabel.snp.makeConstraints { make in
            make.top.equalTo(joinButton.snp.bottom).offset(20)
            make.left.equalTo(roomLabel)
        }
        
        forwardRoomTextField.snp.makeConstraints { make in
            make.centerY.equalTo(forwardRoomLabel)
            make.left.equalTo(forwardRoomLabel.snp.right).offset(10)
            make.width.equalTo(100)
            make.height.equalTo(30)
        }

        // Add button to an array
        let buttons: [UIButton] = [startforwardButton, updateforwardButton, pauseforwardButton, resumeforwardButton, stopforwardButton]

        let stackView = UIStackView(arrangedSubviews: buttons)

        // Set the properties of the stack view
        stackView.axis = .horizontal
        stackView.distribution = .fillEqually
        stackView.spacing = 10
        stackView.alignment = .fill

        view.addSubview(stackView)
        stackView.snp.makeConstraints { (make) in
            make.top.equalTo(forwardRoomLabel.snp.bottom).offset(10)
            make.bottom.equalTo(self.view.snp.bottom).offset(-getSafeAreaInsets().bottom)
            make.left.equalTo(view).offset(10)
            make.right.equalTo(view).offset(-10)
            make.height.equalTo(36)
        }
        
    }
    
    // MARK: Lazy laod
    lazy var roomLabel: UILabel = {
        let label = UILabel()
        label.text = LocalizedString("hint_room_id")
        return label
    }()
    
    lazy var roomTextField: UITextField = {
        let textField = UITextField()
        textField.borderStyle = .roundedRect
        return textField
    }()
    
    lazy var userLabel: UILabel = {
        let label = UILabel()
        label.text = LocalizedString("hint_user_id")
        return label
    }()
    
    lazy var userTextField: UITextField = {
        let textField = UITextField()
        textField.borderStyle = .roundedRect
        return textField
    }()
    
    lazy var joinButton: UIButton = {
        let button = BaseButton.init()
        button.setTitle(LocalizedString("button_join_room"), for: .normal)
        button.addTarget(self, action: #selector(joinRoom), for: .touchUpInside)
        return button
    }()
    
    lazy var forwardRoomLabel: UILabel = {
        let label = UILabel()
        label.text = LocalizedString("label_forward_to_room")
        return label
    }()
    
    lazy var forwardRoomTextField: UITextField = {
        let textField = UITextField()
        textField.borderStyle = .roundedRect
        return textField
    }()
    
    lazy var startforwardButton: UIButton = {
        let button = BaseButton.init()
        button.setTitle(LocalizedString("button_start"), for: .normal)
        button.titleLabel?.font = UIFont.systemFont(ofSize: 14)
        button.titleLabel?.adjustsFontSizeToFitWidth = true
        button.titleLabel?.numberOfLines = 2
        button.addTarget(self, action: #selector(startforward), for: .touchUpInside)
        return button
    }()
    
    lazy var updateforwardButton: UIButton = {
        let button = BaseButton.init()
        button.setTitle(LocalizedString("button_update_transcoding"), for: .normal)
        button.titleLabel?.font = UIFont.systemFont(ofSize: 14)
        button.titleLabel?.adjustsFontSizeToFitWidth = true
        button.titleLabel?.numberOfLines = 2
        button.addTarget(self, action: #selector(updateforward), for: .touchUpInside)
        return button
    }()
    
    lazy var pauseforwardButton: UIButton = {
        let button = BaseButton.init()
        button.setTitle(LocalizedString("button_pause"), for: .normal)
        button.titleLabel?.font = UIFont.systemFont(ofSize: 14)
        button.titleLabel?.adjustsFontSizeToFitWidth = true
        button.titleLabel?.numberOfLines = 2
        button.addTarget(self, action: #selector(pauseforward), for: .touchUpInside)
        return button
    }()
    
    lazy var resumeforwardButton: UIButton = {
        let button = BaseButton.init()
        button.setTitle(LocalizedString("button_resume"), for: .normal)
        button.titleLabel?.font = UIFont.systemFont(ofSize: 14)
        button.titleLabel?.adjustsFontSizeToFitWidth = true
        button.titleLabel?.numberOfLines = 2
        button.addTarget(self, action: #selector(resumeforward), for: .touchUpInside)
        return button
    }()
    
    lazy var stopforwardButton: UIButton = {
        let button = BaseButton.init()
        button.setTitle(LocalizedString("button_stop"), for: .normal)
        button.titleLabel?.font = UIFont.systemFont(ofSize: 14)
        button.titleLabel?.adjustsFontSizeToFitWidth = true
        button.titleLabel?.numberOfLines = 2
        button.addTarget(self, action: #selector(stopforward), for: .touchUpInside)
        return button
    }()
    
    lazy var containerView: UIView = {
        let view = UIView.init()
        view.backgroundColor = .groupTableViewBackground
        return view
    }()
    
    lazy var localView: UserVideoView = {
        let view = UserVideoView.init()
        return view
    }()
    
    // MARK: ByteRTCVideoDelegate & ByteRTCRoomDelegate
    // Room entry status
    func rtcRoom(_ rtcRoom: ByteRTCRoom, onRoomStateChanged roomId: String, withUid uid: String, state: Int, extraInfo: String) {
        ToastComponents.shared.show(withMessage: "onRoomStateChanged uid: \(uid) state:\(state)")
        
    }
    
    // Remote user publishing stream
    func rtcRoom(_ rtcRoom: ByteRTCRoom, onUserPublishStream userId: String, type: ByteRTCMediaStreamType) {
        ToastComponents.shared.show(withMessage: "onUserPublishStream uid: \(userId)")
        
    }
    
    // Remote user cancels publishing flow
    func rtcRoom(_ rtcRoom: ByteRTCRoom, onUserUnpublishStream userId: String, type: ByteRTCMediaStreamType, reason: ByteRTCStreamRemoveReason) {
        ToastComponents.shared.show(withMessage: "onUserUnpublishStream uid: \(userId)")
        
    }
    
    // Remote users join the room
    func rtcRoom(_ rtcRoom: ByteRTCRoom, onUserJoined userInfo: ByteRTCUserInfo, elapsed: Int) {
        ToastComponents.shared.show(withMessage: "onUserJoined uid: \(userInfo.userId)")
        
    }
    
    // The remote user leaves the room
    func rtcRoom(_ rtcRoom: ByteRTCRoom, onUserLeave uid: String, reason: ByteRTCUserOfflineReason) {
        ToastComponents.shared.show(withMessage: "onUserLeave uid: \(uid)")
        
    }
    
    // Retweet status
    func rtcRoom(_ rtcRoom: ByteRTCRoom, onForwardStreamStateChanged infos: [ByteRTCForwardStreamStateInfo]) {
        ToastComponents.shared.show(withMessage: "onForwardStreamStateChanged state: \(String(describing: infos.first?.state.rawValue))")
    }
    
    // Retweet event
    func rtcRoom(_ rtcRoom: ByteRTCRoom, onForwardStreamEvent infos: [ByteRTCForwardStreamEventInfo]) {
        ToastComponents.shared.show(withMessage: "onForwardStreamEvent event: \(String(describing: infos.first?.event.rawValue))")
    }
}
