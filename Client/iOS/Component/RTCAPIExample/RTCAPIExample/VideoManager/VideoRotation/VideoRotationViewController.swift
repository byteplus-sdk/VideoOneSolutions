/**
* Function name: BytePlusRTC video rotation function
* Simple description of the function: modify the commonly used rotation, video direction, etc. of the video
* Reminder:
* 1. To demonstrate, all functional tokens are generated by the client side TokenGenerator class, please depend on the specific situation when actually accessing
* Reference document: https://docs.byteplus.com/en/docs/byteplus-rtc/docs-106458
*/


import UIKit
import SnapKit
import BytePlusRTC

class VideoRotationViewController: BaseViewController, ByteRTCVideoDelegate, ByteRTCRoomDelegate {
    
    var rtcVideo: ByteRTCVideo?
    var rtcRoom: ByteRTCRoom?
    var users : Array = Array<ByteRTCRemoteStreamKey>()
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.postInterfaceOrientation(.unknown)
        self.addOrientationNotice()
        
        self.createUI()
        self.buildRTCEngine()
        self.buildActions()
    }
    
    deinit {
        
        self.rtcRoom?.leaveRoom()
        self.rtcRoom?.destroy()
        self.rtcRoom = nil
        
        ByteRTCVideo.destroyRTCVideo()
        self.rtcVideo = nil
        
        self.setDeviceInterfaceOrientation(.portrait)
    }
    
    // MARK: Private method
    
    @objc func joinRoom()  {
        let roomId = self.roomSettingItem.text ?? ""
        let userId = self.userSettingItem.text ?? ""
        
        var vaild = checkValid(roomId)
        if vaild == false {
            ToastComponents.shared.show(withMessage: LocalizedString("toast_check_valid_false"))
            return
        }
        
        vaild = checkValid(userId)
        if vaild == false {
            ToastComponents.shared.show(withMessage: LocalizedString("toast_check_valid_false"))
            return
        }
        
        joinButton.isSelected = !joinButton.isSelected
        
        if joinButton.isSelected {
            generatorToken(roomId: roomId, userId: userId) { [weak self] token in
                self?.joinButton.setTitle(LocalizedString("button_leave_room"), for: .normal)
                // Join room
                self?.rtcRoom = self?.rtcVideo?.createRTCRoom(roomId)
                self?.rtcRoom?.delegate = self
                
                let userInfo = ByteRTCUserInfo.init()
                userInfo.userId = userId
                
                let roomCfg = ByteRTCRoomConfig.init()
                roomCfg.isAutoPublish = true
                roomCfg.isAutoSubscribeAudio = true
                roomCfg.isAutoSubscribeVideo = true
                
                self?.rtcRoom?.joinRoom(token, userInfo: userInfo, roomConfig: roomCfg)
            }
        } else {
            self.joinButton.setTitle(LocalizedString("button_join_room"), for: .normal)
            self.rtcRoom?.leaveRoom()
        }
    }
    
    func buildRTCEngine() {
        // Create engine
        self.rtcVideo = ByteRTCVideo.createRTCVideo(kAppID, delegate: self, parameters: [:])
        
        // Enable local audio and video collection
        self.rtcVideo?.startVideoCapture()
        self.rtcVideo?.startAudioCapture()
        
        self.bindLocalRenderView()
    }
    
    func bindLocalRenderView() {
        // Set local rendering view
        let canvas = ByteRTCVideoCanvas.init()
        canvas.view = self.localView.videoView
        canvas.renderMode = .hidden
        self.localView.userId = userSettingItem.text ?? ""
        
        self.rtcVideo?.setLocalVideoCanvas(.main, withCanvas: canvas);
    }
    
    func updateRenderView() {
        // Get the first user of the room
        var remoteUser:ByteRTCRemoteStreamKey?
        
        for streamKey in self.users {
            if remoteUser == nil && streamKey.roomId ==  self.roomSettingItem.text {
                remoteUser = streamKey
            }
        }
        
        if (remoteUser != nil) {
            self.bindRemoteRenderView(view: self.firstRemoteView,roomId: (remoteUser?.roomId)!,userId: (remoteUser?.userId)!)
        }
    }
    
    @objc func addWatermark() {
        addWatermarkButton.isSelected = !addWatermarkButton.isSelected
        
        if (addWatermarkButton.isSelected) {
            addWatermarkButton.setTitle(LocalizedString("button_remove_watermark"), for: .normal)
            
            let imageSize = CGSizeMake(171.0, 34.0)
            let videoSize = self.isLandscape ? CGSizeMake(1280.0, 720.0) : CGSizeMake(720.0, 1280.0)
            
            let filePath = Bundle.main.path(forResource: "watermark", ofType: "jpg")!
            let config = ByteRTCVideoWatermarkConfig.init()
            config.visibleInPreview = true
            
            let position = ByteRTCVideoByteWatermark.init()
            position.x = Float(((videoSize.width - imageSize.width) / 2) / videoSize.width)
            position.y = Float(((videoSize.height - imageSize.height) / 2) / videoSize.height)
            position.width = Float(imageSize.width / videoSize.width)
            position.height = Float(imageSize.height / videoSize.height)
            
            config.positionInPortraitMode = position
            config.positionInLandscapeMode = position
            
            self.rtcVideo?.setVideoWatermark(.main, withImagePath: filePath, withRtcWatermarkConfig: config)
        } else {
            addWatermarkButton.setTitle(LocalizedString("button_add_watermark"), for: .normal)
            
            self.rtcVideo?.clearVideoWatermark(.main)
        }
    }
    
    @objc func scrollViewAction()  {
        self.view.endEditing(true)
    }
    
    func buildActions() {
        weak var weakSelf = self
        // Set video frame orientation
        self.videoOrientationSheetView.didSelectOption = {(value) in
            weakSelf?.rtcVideo?.setVideoOrientation(ByteRTCVideoOrientation(rawValue: UInt(value))!)
        }
        
        // Set the rotation mode of captured video
        self.appOrientationSheetView.didSelectOption = {(value) in
            weakSelf?.rtcVideo?.setVideoRotationMode(ByteRTCVideoRotationMode(rawValue: UInt(value))!)
        }
    }
    
    func bindRemoteRenderView(view: UserVideoView, roomId: String, userId: String) {
        // Set the remote user video rendering view
        let canvas = ByteRTCVideoCanvas.init()
        canvas.view = view.videoView
        canvas.renderMode = .hidden
        view.userId = userId

        let streamKey = ByteRTCRemoteStreamKey.init()
        streamKey.userId = userId
        streamKey.roomId = roomId;
        streamKey.streamIndex = .main
        
        self.rtcVideo?.setRemoteVideoCanvas(streamKey, withCanvas: canvas)
    }
    
    func createUI() -> Void {
        self.view.addSubview(scrollView)
        scrollView.snp.makeConstraints { make in
            make.top.equalTo(topView.snp.bottom)
            make.left.right.bottom.equalToSuperview()
        }
        
        let view = UIView()
        scrollView.addSubview(view)
        view.snp.makeConstraints { make in
            make.edges.equalToSuperview()
            make.width.equalToSuperview()
        }
        
        view.addSubview(containerView)
        containerView.snp.makeConstraints { make in
            make.top.left.right.equalToSuperview()
            make.height.equalTo(containerView.snp.width).multipliedBy(1280.0/720.0/2)
        }
        
        self.containerView.addSubview(localView)
        self.containerView.addSubview(firstRemoteView)
        self.localView.snp.makeConstraints { make in
            make.left.top.equalTo(self.containerView)
            make.height.equalTo(self.containerView)
            make.width.equalTo(self.containerView).multipliedBy(0.5)
        }
        
        self.firstRemoteView.snp.makeConstraints { make in
            make.right.bottom.equalTo(self.containerView)
            make.height.equalTo(self.containerView)
            make.width.equalTo(self.containerView).multipliedBy(0.5)
        }

        view.addSubview(roomSettingItem)
        view.addSubview(userSettingItem)
        view.addSubview(joinButton)
        view.addSubview(addWatermarkButton)
        
        roomSettingItem.snp.makeConstraints { make in
            make.top.equalTo(containerView.snp.bottom).offset(10)
            make.left.equalToSuperview().offset(10)
            make.height.equalTo(30)
        }
        
        userSettingItem.snp.makeConstraints { make in
            make.centerY.equalTo(roomSettingItem)
            make.left.equalTo(roomSettingItem.snp.right).offset(20)
            make.right.equalToSuperview().offset(-10)
            make.width.height.equalTo(roomSettingItem)
        }
        
        joinButton.snp.makeConstraints { make in
            make.top.equalTo(roomSettingItem.snp.bottom).offset(10)
            make.left.equalToSuperview().offset(10)
            make.right.equalToSuperview().offset(-10)
            make.height.equalTo(36)
        }
        
        addWatermarkButton.snp.makeConstraints { make in
            make.top.equalTo(joinButton.snp.bottom).offset(10)
            make.left.right.width.height.equalTo(joinButton)
        }
        
        view.addSubview(videoOrientationSheetView)
        view.addSubview(appOrientationSheetView)
        
        videoOrientationSheetView.snp.makeConstraints { make in
            make.top.equalTo(addWatermarkButton.snp.bottom).offset(10)
            make.left.right.equalTo(joinButton)
        }
        
        appOrientationSheetView.snp.makeConstraints { make in
            make.top.equalTo(videoOrientationSheetView.snp.bottom).offset(10)
            make.left.right.equalTo(joinButton)
            make.bottom.equalToSuperview().offset(-10)
        }
    }
    
    // MARK: Lazy laod
    lazy var scrollView: UIScrollView = {
        let scrollView = UIScrollView()
        scrollView.showsVerticalScrollIndicator = false
        scrollView.isUserInteractionEnabled = true
        let tap = UITapGestureRecognizer(target: self, action: #selector(scrollViewAction))
        scrollView.addGestureRecognizer(tap)
        return scrollView
    }()
    
    lazy var roomSettingItem: TextFieldView = {
        let settingView = TextFieldView()
        settingView.title = LocalizedString("hint_room_id")
        return settingView
    }()
    
    lazy var userSettingItem: TextFieldView = {
        let settingView = TextFieldView()
        settingView.title = LocalizedString("hint_user_id")
        return settingView
    }()
    
    lazy var joinButton: UIButton = {
        let button = BaseButton()
        button.setTitle(LocalizedString("button_join_room"), for: .normal)
        button.addTarget(self, action: #selector(joinRoom), for: .touchUpInside)
        return button
    }()
    
    lazy var addWatermarkButton: UIButton = {
        let button = BaseButton()
        button.setTitle(LocalizedString("button_add_watermark"), for: .normal)
        button.addTarget(self, action: #selector(addWatermark), for: .touchUpInside)
        return button
    }()
    
    lazy var videoOrientationSheetView: ActionSheetView = {
        let actionSheetView = ActionSheetView.init(title: LocalizedString("button_video_orientation"), optionArray: ["Adaptive","Portrait","Landscape"], defaultIndex: 0)
        actionSheetView.presentingViewController = self
        
        return actionSheetView
    }()
    
    lazy var appOrientationSheetView: ActionSheetView = {
        let actionSheetView = ActionSheetView.init(title: LocalizedString("button_rotation_mode"), optionArray: ["FollowApp","FollowGSensor"], defaultIndex: 0)
        actionSheetView.presentingViewController = self
        
        return actionSheetView
    }()
    
    lazy var containerView: UIView = {
        let view = UIView.init()
        view.backgroundColor = .groupTableViewBackground
        return view
    }()
    
    lazy var localView: UserVideoView = {
        let view = UserVideoView.init()
        return view
    }()
    
    lazy var firstRemoteView: UserVideoView = {
        let view = UserVideoView.init()
        return view
    }()
    
    // MARK: ByteRTCVideoDelegate & ByteRTCRoomDelegate
    func rtcRoom(_ rtcRoom: ByteRTCRoom, onRoomStateChanged roomId: String, withUid uid: String, state: Int, extraInfo: String) {
        ToastComponents.shared.show(withMessage: "onRoomStateChanged uid: \(uid) state:\(state)")
        
    }
    
    // Remote user publishing stream
    func rtcRoom(_ rtcRoom: ByteRTCRoom, onUserPublishStream userId: String, type: ByteRTCMediaStreamType) {
        ToastComponents.shared.show(withMessage: "onUserPublishStream uid: \(userId)")
        
        if type == .video || type == .both {
            
            let streamKey = ByteRTCRemoteStreamKey.init()
            streamKey.userId = userId
            streamKey.roomId = rtcRoom.getId();
            streamKey.streamIndex = .main
            
            self.users.append(streamKey)
            
            DispatchQueue.main.async {
                self.updateRenderView()
            }
        }
    }
    
     // Remote user cancels publishing flow
    func rtcRoom(_ rtcRoom: ByteRTCRoom, onUserUnpublishStream userId: String, type: ByteRTCMediaStreamType, reason: ByteRTCStreamRemoveReason) {
        ToastComponents.shared.show(withMessage: "onUserUnpublishStream uid: \(userId)")
        
        DispatchQueue.main.async {
            if type == .video || type == .both {
                
                // Remove from self.users
                var itemsToRemove: [ByteRTCRemoteStreamKey] = []
                
                for streamKey in self.users {
                    if streamKey.userId == userId {
                        itemsToRemove.append(streamKey)
                    }
                }
                
                for item in itemsToRemove {
                    if let index = self.users.firstIndex(of: item) {
                        self.users.remove(at: index)
                    }
                }
                
                for videoView in self.containerView.subviews {
                    if let view = videoView as? UserVideoView {
                        let userId = view.userId
                        
                        if userId == userId {
                            view.userId = ""
                        }
                    }
                }
                
                self.updateRenderView()
            }
        }
    }
    
    // Callback when local video size or direction changes
    func rtcEngine(_ engine: ByteRTCVideo, onLocalVideoSizeChanged streamIndex: ByteRTCStreamIndex, withFrameInfo frameInfo: ByteRTCVideoFrameInfo) {
        ToastComponents.shared.show(withMessage: "onLocalVideoSizeChanged width: \(frameInfo.width) height: \(frameInfo.height) rotation: \(frameInfo.rotation)")
    }
    
    // Remote users join the room
    func rtcRoom(_ rtcRoom: ByteRTCRoom, onUserJoined userInfo: ByteRTCUserInfo, elapsed: Int) {
        ToastComponents.shared.show(withMessage: "onUserJoined uid: \(userInfo.userId)")
        
    }
    
    // The remote user leaves the room
    func rtcRoom(_ rtcRoom: ByteRTCRoom, onUserLeave uid: String, reason: ByteRTCUserOfflineReason) {
        ToastComponents.shared.show(withMessage: "onUserLeave uid: \(uid)")
        
    }
    
}
