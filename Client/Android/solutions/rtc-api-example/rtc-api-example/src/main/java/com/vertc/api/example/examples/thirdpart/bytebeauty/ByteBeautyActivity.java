package com.vertc.api.example.examples.thirdpart.bytebeauty;

import android.os.Bundle;
import android.text.TextUtils;
import android.view.TextureView;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.ViewModelProvider;
import androidx.viewpager2.adapter.FragmentStateAdapter;
import androidx.viewpager2.widget.ViewPager2;

import com.google.android.material.tabs.TabLayout;
import com.google.android.material.tabs.TabLayoutMediator;
import com.ss.bytertc.engine.RTCRoom;
import com.ss.bytertc.engine.RTCRoomConfig;
import com.ss.bytertc.engine.RTCVideo;
import com.ss.bytertc.engine.UserInfo;
import com.ss.bytertc.engine.VideoCanvas;
import com.ss.bytertc.engine.data.RemoteStreamKey;
import com.ss.bytertc.engine.data.StreamIndex;
import com.ss.bytertc.engine.data.VideoOrientation;
import com.ss.bytertc.engine.handler.IRTCRoomEventHandler;
import com.ss.bytertc.engine.handler.IRTCVideoEventHandler;
import com.ss.bytertc.engine.type.ChannelProfile;
import com.ss.bytertc.engine.type.MediaStreamType;
import com.ss.bytertc.engine.type.RTCRoomStats;
import com.ss.bytertc.engine.type.StreamRemoveReason;
import com.vertc.api.example.R;
import com.vertc.api.example.base.ExampleBaseActivity;
import com.vertc.api.example.base.ExampleCategory;
import com.vertc.api.example.base.annotation.ApiExample;
import com.vertc.api.example.examples.thirdpart.bytebeauty.bean.EffectSection;
import com.vertc.api.example.examples.thirdpart.bytebeauty.fragments.EffectNodesFragment;
import com.vertc.api.example.utils.IMEUtils;
import com.vertc.api.example.utils.RTCHelper;
import com.vertc.api.example.utils.ToastUtil;

import java.util.Locale;

/**
 * <pre>
 * Function name: BytePlusRTC beauty effects.
 * Function brief: Shows the usage of beauty effects, filters, stickers, and background segmentation.
 * Notes:
 *   1. For demonstration purposes, all tokens for the functionalities are generated by the client-side TokenGenerator class. However, please adjust accordingly based on the specific circumstances when integrating in a real environment.
 *   2. This feature is available as a paid service. Please reach out to the technical support team of BytePlus Effects for acquiring the Standard/Lite version of the v4.4.2+Effects SDK, along with the relevant license and resource packages tailored to your specific application needs.
 *   2.2 After applying for paid access:
 *   2.3 Modify the CVLicenseName in the Demo Config.h file with the filename of your license.
 *   2.4 Put the resources in the ApiExample/ApiExample/ImportantComponents/Beauty/VolcBeauty/resource directory.
 *
 * Reference document: https://docs.byteplus.com/en/docs/byteplus-rtc/docs-114717
 * </pre>
 */
@ApiExample(title = "Byte beauty", category = ExampleCategory.IMPORTANT, order = 1)
public class ByteBeautyActivity extends ExampleBaseActivity {

    private FrameLayout localContainer;
    private FrameLayout remoteContainer;

    private RTCVideo rtcVideo;
    private RTCRoom rtcRoom;

    String roomId;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        ByteBeautyViewModel viewModel = new ViewModelProvider(this).get(ByteBeautyViewModel.class);
        setContentView(R.layout.activity_byte_beauty);

        findViewById(R.id.content).setOnClickListener(IMEUtils::closeIME);

        initUI();

        rtcVideo = RTCHelper.createRTCVideo(this, videoEventHandler);
        viewModel.init(rtcVideo.getVideoEffectInterface(), new EffectResourceManager(this));
        setLocalRenderView();
        rtcVideo.startVideoCapture();
        rtcVideo.startAudioCapture();
        rtcVideo.setVideoOrientation(VideoOrientation.PORTRAIT);

        TextView btnJoinRoom = findViewById(R.id.btn_join_room);
        EditText roomIdInput = findViewById(R.id.room_id_input);
        btnJoinRoom.setOnClickListener(v -> {
            if (v.isSelected()) {
                leaveRoom();

                v.setSelected(false);
                btnJoinRoom.setText(R.string.button_join_room);
                return;
            }
            String roomId = roomIdInput.getText().toString();
            if (!RTCHelper.checkValid(roomId)) {
                ToastUtil.showToast(this, R.string.toast_check_valid_false);
                return;
            }
            joinRoom(roomId);
            v.setSelected(true);
            btnJoinRoom.setText(R.string.button_leave_room);
        });
    }

    private void initUI() {
        localContainer = findViewById(R.id.local_container);
        remoteContainer = findViewById(R.id.remote_container);

        EffectSection[] sections = EffectSection.values();
        TabLayout tabLayout = findViewById(R.id.tab_layout);
        ViewPager2 tabViewPager = findViewById(R.id.tab_view_pager);
        tabViewPager.setAdapter(new FragmentStateAdapter(this) {
            @NonNull
            @Override
            public Fragment createFragment(int position) {
                EffectSection section = sections[position];

                return EffectNodesFragment.newInstance(section);
            }

            @Override
            public int getItemCount() {
                return sections.length;
            }
        });

        new TabLayoutMediator(tabLayout, tabViewPager, (tab, index) -> {
            tab.setText(sections[index].title);
        }).attach();
    }

    private void setLocalRenderView() {
        TextureView textureView = new TextureView(this);
        localContainer.removeAllViews();
        localContainer.addView(textureView);

        VideoCanvas videoCanvas = new VideoCanvas();
        videoCanvas.renderView = textureView;
        videoCanvas.renderMode = VideoCanvas.RENDER_MODE_HIDDEN;
        rtcVideo.setLocalVideoCanvas(StreamIndex.STREAM_INDEX_MAIN, videoCanvas);
    }

    private void setRemoteRenderView(String uid) {
        Object tag = remoteContainer.getTag(R.id.remote_user_id);
        if (tag != null) {
            // Used, a remote user already exists
            return;
        }

        remoteContainer.setTag(R.id.remote_user_id, uid);

        TextureView textureView = new TextureView(this);
        remoteContainer.removeAllViews();
        remoteContainer.addView(
                textureView,
                new FrameLayout.LayoutParams(
                        FrameLayout.LayoutParams.MATCH_PARENT,
                        FrameLayout.LayoutParams.MATCH_PARENT
                )
        );

        RemoteStreamKey remoteStreamKey = new RemoteStreamKey(roomId, uid, StreamIndex.STREAM_INDEX_MAIN);
        VideoCanvas videoCanvas = new VideoCanvas();
        videoCanvas.renderView = textureView;
        videoCanvas.renderMode = VideoCanvas.RENDER_MODE_HIDDEN;
        rtcVideo.setRemoteVideoCanvas(remoteStreamKey, videoCanvas);
    }

    private void removeRemoteView(String uid) {
        String tag = (String) remoteContainer.getTag(R.id.remote_user_id);
        if (!TextUtils.equals(uid, tag)) {
            // Not my remote view, skip
            return;
        }
        remoteContainer.setTag(R.id.remote_user_id, null);

        remoteContainer.removeAllViews();

        RemoteStreamKey remoteStreamKey = new RemoteStreamKey(roomId, uid, StreamIndex.STREAM_INDEX_MAIN);
        VideoCanvas videoCanvas = new VideoCanvas();
        videoCanvas.renderView = null;
        videoCanvas.renderMode = VideoCanvas.RENDER_MODE_HIDDEN;
        rtcVideo.setRemoteVideoCanvas(remoteStreamKey, videoCanvas);
    }

    private void joinRoom(String roomId) {
        this.roomId = roomId;
        requestRoomToken(roomId, localUid, token -> {
            rtcRoom = rtcVideo.createRTCRoom(roomId);
            rtcRoom.setRTCRoomEventHandler(rtcRoomEventHandler);
            UserInfo userInfo = new UserInfo(localUid, "");
            boolean isAutoPublish = true;
            boolean isAutoSubscribeAudio = true;
            boolean isAutoSubscribeVideo = true;
            RTCRoomConfig roomConfig = new RTCRoomConfig(
                    ChannelProfile.CHANNEL_PROFILE_CHAT_ROOM,
                    isAutoPublish,
                    isAutoSubscribeAudio,
                    isAutoSubscribeVideo);
            rtcRoom.joinRoom(token, userInfo, roomConfig);
        });
    }

    private void leaveRoom() {
        if (rtcRoom != null) {
            rtcRoom.leaveRoom();
            rtcRoom.destroy();
            rtcRoom = null;
        }
    }

    IRTCRoomEventHandler rtcRoomEventHandler = new IRTCRoomEventHandler() {
        @Override
        public void onRoomStateChanged(String roomId, String uid, int state, String extraInfo) {
            super.onRoomStateChanged(roomId, uid, state, extraInfo);
            String info = String.format(Locale.ENGLISH, "roomId:%s, uid:%s, state:%d, extraInfo:%s", roomId, uid, state, extraInfo);
            ToastUtil.showLongToast(ByteBeautyActivity.this, info);
        }

        @Override
        public void onUserPublishStream(String uid, MediaStreamType type) {
            super.onUserPublishStream(uid, type);
            if (type == MediaStreamType.RTC_MEDIA_STREAM_TYPE_VIDEO
                    || type == MediaStreamType.RTC_MEDIA_STREAM_TYPE_BOTH) {
                runOnUiThread(() -> setRemoteRenderView(uid));
            }
        }

        @Override
        public void onUserUnpublishStream(String uid, MediaStreamType type, StreamRemoveReason reason) {
            super.onUserUnpublishStream(uid, type, reason);
            if (type == MediaStreamType.RTC_MEDIA_STREAM_TYPE_VIDEO
                    || type == MediaStreamType.RTC_MEDIA_STREAM_TYPE_BOTH) {
                runOnUiThread(() -> removeRemoteView(uid));
            }
        }

        @Override
        public void onLeaveRoom(RTCRoomStats stats) {
            super.onLeaveRoom(stats);
            ToastUtil.showLongToast(ByteBeautyActivity.this, "onLeaveRoom, stats:" + stats.toString());
        }

        @Override
        public void onUserJoined(UserInfo userInfo, int elapsed) {
            super.onUserJoined(userInfo, elapsed);
            ToastUtil.showLongToast(ByteBeautyActivity.this, "onUserJoined, uid:" + userInfo.getUid());
        }
    };

    IRTCVideoEventHandler videoEventHandler = new IRTCVideoEventHandler() {
    };

    @Override
    protected void onDestroy() {
        super.onDestroy();
        leaveRoom();
        if (rtcVideo != null) {
            rtcVideo.stopAudioCapture();
            rtcVideo.stopVideoCapture();
        }
        RTCVideo.destroyRTCVideo();
    }
}