package com.vertc.api.example.examples.audio;

import android.os.Bundle;
import android.view.TextureView;
import android.view.View;
import android.widget.AdapterView;

import com.ss.bytertc.engine.RTCRoom;
import com.ss.bytertc.engine.RTCRoomConfig;
import com.ss.bytertc.engine.RTCVideo;
import com.ss.bytertc.engine.UserInfo;
import com.ss.bytertc.engine.VideoCanvas;
import com.ss.bytertc.engine.data.StreamIndex;
import com.ss.bytertc.engine.handler.IRTCRoomEventHandler;
import com.ss.bytertc.engine.handler.IRTCVideoEventHandler;
import com.ss.bytertc.engine.type.AnsMode;
import com.ss.bytertc.engine.type.ChannelProfile;
import com.ss.bytertc.engine.type.RTCRoomStats;
import com.ss.bytertc.engine.type.VoiceChangerType;
import com.ss.bytertc.engine.type.VoiceEqualizationBandFrequency;
import com.ss.bytertc.engine.type.VoiceEqualizationConfig;
import com.ss.bytertc.engine.type.VoiceReverbConfig;
import com.ss.bytertc.engine.type.VoiceReverbType;
import com.vertc.api.example.R;
import com.vertc.api.example.adapter.OnItemSelectedAdapter;
import com.vertc.api.example.base.ExampleBaseActivity;
import com.vertc.api.example.base.ExampleCategory;
import com.vertc.api.example.base.annotation.ApiExample;
import com.vertc.api.example.databinding.ActivityVoiceEffectBinding;
import com.vertc.api.example.utils.IMEUtils;
import com.vertc.api.example.utils.RTCHelper;
import com.vertc.api.example.utils.ToastUtil;

import java.util.Locale;

/**
 * <pre>
 * Function name: BytePlusRTC vocal enhancement and sound effects.
 * Function brief: This function shows effects including reverb and noise reduction.
 * Notes:
 * 1. Please contact the technical support team before using this function.
 * 2. For demonstration purposes, all tokens for the functionalities are generated by the client-side TokenGenerator class. However, please adjust accordingly based on the specific circumstances when integrating in a real environment.
 * Reference document: https://docs.byteplus.com/en/docs/byteplus-rtc/docs-1178327
 * </pre>
 */
@ApiExample(title = "Audio sound effect", category = ExampleCategory.AUDIO, order = 4)
public class VoiceEffectActivity extends ExampleBaseActivity {

    private RTCVideo rtcVideo;
    private RTCRoom rtcRoom;
    ActivityVoiceEffectBinding binding;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        binding = ActivityVoiceEffectBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot());

        binding.content.setOnClickListener(IMEUtils::closeIME);

        initUI(binding);

        rtcVideo = RTCHelper.createRTCVideo(this, rtcVideoEventHandler);
        rtcVideo.startAudioCapture();
        rtcVideo.startVideoCapture();

        setLocalRenderView();
    }

    private void initUI(ActivityVoiceEffectBinding binding) {
        binding.btnJoinRoom.setOnClickListener(v -> {
            if (v.isSelected()) {
                leaveRoom();

                v.setSelected(false);
                binding.btnJoinRoom.setText(R.string.button_join_room);
                return;
            }
            String roomId = binding.roomIdInput.getText().toString();
            if (!RTCHelper.checkValid(roomId)) {
                ToastUtil.showToast(this, R.string.toast_check_valid_false);
                return;
            }
            joinRoom(roomId);
            v.setSelected(true);
            binding.btnJoinRoom.setText(R.string.button_leave_room);
        });

        binding.voiceReverbSpinner.setOnItemSelectedListener(new OnItemSelectedAdapter() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                String item = (String) binding.voiceReverbSpinner.getSelectedItem();
                rtcVideo.setVoiceReverbType(getVoiceReverbType(item));
            }
        });
        binding.ansModeSpinner.setOnItemSelectedListener(new OnItemSelectedAdapter() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                String item = (String) binding.ansModeSpinner.getSelectedItem();
                rtcVideo.setAnsMode(getAnsMode(item));
            }
        });
        binding.voiceEqualizationSpinner.setOnItemSelectedListener(new OnItemSelectedAdapter() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                String item = (String) binding.voiceEqualizationSpinner.getSelectedItem();
                int gain = (int) binding.voiceGainBar.getValue();
                setLocalVoiceEqualization(getBandFrequency(item), gain);
            }
        });
        binding.voicePitchBar.addOnChangeListener((slider, value, fromUser) -> {
            int pitch = (int) value;
            rtcVideo.setLocalVoicePitch(pitch);
            binding.voicePitchText.setText(String.valueOf(pitch));
        });
        binding.voiceGainBar.addOnChangeListener((slider, value, fromUser) -> {
            int gain = (int) value;
            String item = (String) binding.voiceEqualizationSpinner.getSelectedItem();
            setLocalVoiceEqualization(getBandFrequency(item), gain);

            binding.voiceGainText.setText(String.valueOf(gain));
        });
        binding.roomSizeBar.addOnChangeListener((slider, value, fromUser) -> {
            setLocalVoiceReverbParam();
            binding.roomSizeText.setText(String.format(Locale.ENGLISH, "%1$.2f", value));
        });
        binding.decayTimeBar.addOnChangeListener((slider, value, fromUser) -> {
            setLocalVoiceReverbParam();
            binding.decatTimeText.setText(String.format(Locale.ENGLISH, "%1$.2f", value));
        });
        binding.dampingBar.addOnChangeListener((slider, value, fromUser) -> {
            setLocalVoiceReverbParam();
            binding.dampingText.setText(String.format(Locale.ENGLISH, "%1$.2f", value));
        });
        binding.wetGainBar.addOnChangeListener((slider, value, fromUser) -> {
            setLocalVoiceReverbParam();
            binding.wetGainText.setText(String.format(Locale.ENGLISH, "%1$.2f", value));
        });
        binding.dryGainBar.addOnChangeListener((slider, value, fromUser) -> {
            setLocalVoiceReverbParam();
            binding.dryGainText.setText(String.format(Locale.ENGLISH, "%1$.2f", value));
        });
        binding.preDelayBar.addOnChangeListener((slider, value, fromUser) -> {
            setLocalVoiceReverbParam();
            binding.preDelayText.setText(String.format(Locale.ENGLISH, "%1$.2f", value));
        });
        binding.voiceReverbSwitch.setOnCheckedChangeListener((buttonView, isChecked) -> rtcVideo.enableLocalVoiceReverb(isChecked));
    }

    private void setLocalRenderView() {
        TextureView textureView = new TextureView(this);
        binding.localViewContainer.removeAllViews();
        binding.localViewContainer.addView(textureView);

        VideoCanvas videoCanvas = new VideoCanvas();
        videoCanvas.renderView = textureView;
        videoCanvas.renderMode = VideoCanvas.RENDER_MODE_HIDDEN;
        rtcVideo.setLocalVideoCanvas(StreamIndex.STREAM_INDEX_MAIN, videoCanvas);
    }

    private void joinRoom(String roomId) {
        requestRoomToken(roomId, localUid, token -> {
            rtcRoom = rtcVideo.createRTCRoom(roomId);
            rtcRoom.setRTCRoomEventHandler(rtcRoomEventHandler);
            UserInfo userInfo = new UserInfo(localUid, "");
            boolean isAutoPublish = true;
            boolean isAutoSubscribeAudio = true;
            boolean isAutoSubscribeVideo = true;
            RTCRoomConfig roomConfig = new RTCRoomConfig(
                    ChannelProfile.CHANNEL_PROFILE_CHAT_ROOM,
                    isAutoPublish,
                    isAutoSubscribeAudio,
                    isAutoSubscribeVideo);
            rtcRoom.joinRoom(token, userInfo, roomConfig);
        });
    }

    private void leaveRoom() {
        if (rtcRoom != null) {
            rtcRoom.leaveRoom();
            rtcRoom.destroy();
            rtcRoom = null;
        }
    }

    private void setLocalVoiceEqualization(VoiceEqualizationBandFrequency frequency, int gain) {
        VoiceEqualizationConfig config = new VoiceEqualizationConfig(frequency, gain);
        rtcVideo.setLocalVoiceEqualization(config);
    }

    private void setLocalVoiceReverbParam() {
        if (!binding.voiceReverbSwitch.isChecked()) {
            ToastUtil.showToast(this, R.string.toast_open_audio_effect_first);
            return;
        }

        float roomSize = binding.roomSizeBar.getValue();
        float decayTime = binding.decayTimeBar.getValue();
        float damping = binding.dampingBar.getValue();
        float wetGain = binding.wetGainBar.getValue();
        float dryGain = binding.dryGainBar.getValue();
        float preDelay = binding.preDelayBar.getValue();

        VoiceReverbConfig config = new VoiceReverbConfig(
                roomSize,
                decayTime,
                damping,
                dryGain,
                wetGain,
                preDelay);

        rtcVideo.setLocalVoiceReverbParam(config);
    }

    IRTCVideoEventHandler rtcVideoEventHandler = new IRTCVideoEventHandler() {
    };

    IRTCRoomEventHandler rtcRoomEventHandler = new IRTCRoomEventHandler() {
        @Override
        public void onRoomStateChanged(String roomId, String uid, int state, String extraInfo) {
            super.onRoomStateChanged(roomId, uid, state, extraInfo);
            String info = String.format(Locale.ENGLISH, "roomId:%s, uid:%s, state:%d, extraInfo:%s", roomId, uid, state, extraInfo);
            ToastUtil.showToast(VoiceEffectActivity.this, info);
        }

        @Override
        public void onLeaveRoom(RTCRoomStats stats) {
            super.onLeaveRoom(stats);
            ToastUtil.showLongToast(VoiceEffectActivity.this, "onLeaveRoom, stats:" + stats.toString());
        }
    };

    @Override
    protected void onDestroy() {
        super.onDestroy();
        leaveRoom();
        if (rtcVideo != null) {
            rtcVideo.stopAudioCapture();
            rtcVideo.stopVideoCapture();
        }
        RTCVideo.destroyRTCVideo();
        rtcVideo = null;
    }

    private static VoiceChangerType getVoiceChangerType(String name) {
        switch (name) {
            case "VOICE_CHANGER_GIANT":
                return VoiceChangerType.VOICE_CHANGER_GIANT;
            case "VOICE_CHANGER_CHIPMUNK":
                return VoiceChangerType.VOICE_CHANGER_CHIPMUNK;
            case "VOICE_CHANGER_MINIONST":
                return VoiceChangerType.VOICE_CHANGER_MINIONST;
            case "VOICE_CHANGER_VIBRATO":
                return VoiceChangerType.VOICE_CHANGER_VIBRATO;
            case "VOICE_CHANGER_ROBOT":
                return VoiceChangerType.VOICE_CHANGER_ROBOT;
            case "VOICE_CHANGER_ORIGINAL":
            default:
                return VoiceChangerType.VOICE_CHANGER_ORIGINAL;
        }
    }

    private static VoiceReverbType getVoiceReverbType(String name) {
        switch (name) {
            case "VOICE_REVERB_ECHO":
                return VoiceReverbType.VOICE_REVERB_ECHO;
            case "VOICE_REVERB_CONCERT":
                return VoiceReverbType.VOICE_REVERB_CONCERT;
            case "VOICE_REVERB_ETHEREAL":
                return VoiceReverbType.VOICE_REVERB_ETHEREAL;
            case "VOICE_REVERB_KTV":
                return VoiceReverbType.VOICE_REVERB_KTV;
            case "VOICE_REVERB_STUDIO":
                return VoiceReverbType.VOICE_REVERB_STUDIO;
            case "VOICE_REVERB_VIRTUAL_STEREO":
                return VoiceReverbType.VOICE_REVERB_VIRTUAL_STEREO;
            case "VOICE_REVERB_SPACIOUS":
                return VoiceReverbType.VOICE_REVERB_SPACIOUS;
            case "VOICE_REVERB_3D":
                return VoiceReverbType.VOICE_REVERB_3D;
            case "VOICE_REVERB_ORIGINAL":
            default:
                return VoiceReverbType.VOICE_REVERB_ORIGINAL;
        }
    }

    private static VoiceEqualizationBandFrequency getBandFrequency(String name) {
        switch (name) {
            case "VOICE_EQUALIZATION_BAND_FREQUENCY_62":
                return VoiceEqualizationBandFrequency.VOICE_EQUALIZATION_BAND_FREQUENCY_62;
            case "VOICE_EQUALIZATION_BAND_FREQUENCY_125":
                return VoiceEqualizationBandFrequency.VOICE_EQUALIZATION_BAND_FREQUENCY_125;
            case "VOICE_EQUALIZATION_BAND_FREQUENCY_250":
                return VoiceEqualizationBandFrequency.VOICE_EQUALIZATION_BAND_FREQUENCY_250;
            case "VOICE_EQUALIZATION_BAND_FREQUENCY_500":
                return VoiceEqualizationBandFrequency.VOICE_EQUALIZATION_BAND_FREQUENCY_500;
            case "VOICE_EQUALIZATION_BAND_FREQUENCY_1k":
                return VoiceEqualizationBandFrequency.VOICE_EQUALIZATION_BAND_FREQUENCY_1K;
            case "VOICE_EQUALIZATION_BAND_FREQUENCY_2k":
                return VoiceEqualizationBandFrequency.VOICE_EQUALIZATION_BAND_FREQUENCY_2K;
            case "VOICE_EQUALIZATION_BAND_FREQUENCY_4k":
                return VoiceEqualizationBandFrequency.VOICE_EQUALIZATION_BAND_FREQUENCY_4K;
            case "VOICE_EQUALIZATION_BAND_FREQUENCY_8k":
                return VoiceEqualizationBandFrequency.VOICE_EQUALIZATION_BAND_FREQUENCY_8K;
            case "VOICE_EQUALIZATION_BAND_FREQUENCY_16k":
                return VoiceEqualizationBandFrequency.VOICE_EQUALIZATION_BAND_FREQUENCY_16K;
            case "VOICE_EQUALIZATION_BAND_FREQUENCY_31":
            default:
                return VoiceEqualizationBandFrequency.VOICE_EQUALIZATION_BAND_FREQUENCY_31;
        }
    }

    private static AnsMode getAnsMode(String name) {
        switch (name) {
            case "ANS_MODE_LOW":
                return AnsMode.ANS_MODE_LOW;
            case "ANS_MODE_MEDIUM":
                return AnsMode.ANS_MODE_MEDIUM;
            case "ANS_MODE_HIGH":
                return AnsMode.ANS_MODE_HIGH;
            case "ANS_MODE_AUTOMATIC":
                return AnsMode.ANS_MODE_AUTOMATIC;
            case "ANS_MODE_DISABLE":
            default:
                return AnsMode.ANS_MODE_DISABLE;
        }
    }
}