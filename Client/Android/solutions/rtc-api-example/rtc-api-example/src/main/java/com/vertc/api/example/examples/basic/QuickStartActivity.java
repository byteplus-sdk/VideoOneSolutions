package com.vertc.api.example.examples.basic;

import static com.vertc.api.example.utils.RTCFormatter.formatMediaDeviceError;
import static com.vertc.api.example.utils.RTCFormatter.formatMediaDeviceState;
import static com.vertc.api.example.utils.RTCFormatter.formatMediaDeviceWarning;

import android.os.Bundle;
import android.util.Log;
import android.view.TextureView;
import android.widget.FrameLayout;

import com.ss.bytertc.engine.RTCRoom;
import com.ss.bytertc.engine.RTCRoomConfig;
import com.ss.bytertc.engine.RTCVideo;
import com.ss.bytertc.engine.UserInfo;
import com.ss.bytertc.engine.VideoCanvas;
import com.ss.bytertc.engine.data.RemoteStreamKey;
import com.ss.bytertc.engine.data.StreamIndex;
import com.ss.bytertc.engine.handler.IRTCRoomEventHandler;
import com.ss.bytertc.engine.handler.IRTCVideoEventHandler;
import com.ss.bytertc.engine.type.AudioDeviceType;
import com.ss.bytertc.engine.type.ChannelProfile;
import com.ss.bytertc.engine.type.MediaStreamType;
import com.ss.bytertc.engine.type.RTCRoomStats;
import com.ss.bytertc.engine.type.StreamRemoveReason;
import com.vertc.api.example.R;
import com.vertc.api.example.base.ExampleBaseActivity;
import com.vertc.api.example.base.ExampleCategory;
import com.vertc.api.example.base.annotation.ApiExample;
import com.vertc.api.example.databinding.ActivityQuickStartBinding;
import com.vertc.api.example.utils.IMEUtils;
import com.vertc.api.example.utils.RTCHelper;
import com.vertc.api.example.utils.ToastUtil;

import java.util.Locale;

/**
 * <pre>
 * Function name: BytePlusRTC Quick Start.
 * Function brief: Quickly set up ByteRTC audio and video calling functionality.
 * Notes:
 *   1. Please follow the steps given on the interface to develop the audio & video calling function.
 *   2. For demonstration purposes, all tokens for the functionalities are generated by the client-side TokenGenerator class. However, please adjust accordingly based on the specific circumstances when integrating in a real environment.
 * </pre>
 */
@ApiExample(title = "Quick Start", category = ExampleCategory.BASIC, order = 1)
public class QuickStartActivity extends ExampleBaseActivity {
    private static final String TAG = "QuickStartActivity";

    private FrameLayout localViewContainer;
    private FrameLayout remoteViewContainer;

    private RTCVideo rtcVideo;
    private RTCRoom rtcRoom;
    private String roomId;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        ActivityQuickStartBinding binding = ActivityQuickStartBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot());

        binding.getRoot().setOnClickListener(IMEUtils::closeIME);

        localViewContainer = binding.localContainer;
        remoteViewContainer = binding.remoteContainer;

        binding.btnCreateEngine.setOnClickListener(v -> {
            rtcVideo = RTCHelper.createRTCVideo(this, rtcVideoEventHandler);
        });

        binding.btnStartCapture.setOnClickListener(v -> {
            if (rtcVideo == null) {
                return;
            }

            rtcVideo.startVideoCapture();
            rtcVideo.startAudioCapture();
        });

        binding.btnSetLocalView.setOnClickListener(v -> {
            if (rtcVideo == null) {
                return;
            }

            TextureView localTextureView = new TextureView(this);
            localViewContainer.removeAllViews();
            localViewContainer.addView(localTextureView);

            VideoCanvas videoCanvas = new VideoCanvas();
            videoCanvas.renderView = localTextureView;
            videoCanvas.renderMode = VideoCanvas.RENDER_MODE_HIDDEN;
            rtcVideo.setLocalVideoCanvas(StreamIndex.STREAM_INDEX_MAIN, videoCanvas);
        });

        binding.btnJoinRoom.setOnClickListener(v -> {
            if (rtcVideo == null) {
                ToastUtil.showToast(this, R.string.toast_rtc_engine_not_created);
                return;
            }

            roomId = binding.roomIdInput.getText().toString();
            if (!RTCHelper.checkValid(roomId)) {
                ToastUtil.showToast(this, R.string.toast_check_valid_false);
                return;
            }

            requestRoomToken(roomId, localUid, token -> {
                rtcRoom = rtcVideo.createRTCRoom(roomId);
                rtcRoom.setRTCRoomEventHandler(rtcRoomEventHandler);
                UserInfo userInfo = new UserInfo(localUid, "");
                boolean isAutoPublish = true;
                boolean isAutoSubscribeAudio = true;
                boolean isAutoSubscribeVideo = true;
                RTCRoomConfig roomConfig = new RTCRoomConfig(
                        ChannelProfile.CHANNEL_PROFILE_CHAT_ROOM,
                        isAutoPublish,
                        isAutoSubscribeAudio,
                        isAutoSubscribeVideo);
                rtcRoom.joinRoom(token, userInfo, roomConfig);
            });
        });

        binding.btnLeaveRoom.setOnClickListener(v -> {
            if (rtcRoom != null) {
                rtcRoom.leaveRoom();
            }
        });

        binding.btnDestroyRoom.setOnClickListener(v -> {
            if (rtcRoom != null) {
                rtcRoom.destroy();
            }
            rtcRoom = null;
        });

        binding.btnDestroyEngine.setOnClickListener(v -> {
            RTCVideo.destroyRTCVideo();
            rtcVideo = null;
        });

    }

    private void setRemoteRenderView(String uid) {
        TextureView remoteTextureView = new TextureView(this);
        remoteViewContainer.removeAllViews();
        remoteViewContainer.addView(remoteTextureView);
        VideoCanvas videoCanvas = new VideoCanvas();
        videoCanvas.renderView = remoteTextureView;
        videoCanvas.renderMode = VideoCanvas.RENDER_MODE_HIDDEN;

        RemoteStreamKey remoteStreamKey = new RemoteStreamKey(roomId, uid, StreamIndex.STREAM_INDEX_MAIN);
        rtcVideo.setRemoteVideoCanvas(remoteStreamKey, videoCanvas);
    }

    private void removeRemoteView(String uid) {
        RemoteStreamKey remoteStreamKey = new RemoteStreamKey(roomId, uid, StreamIndex.STREAM_INDEX_MAIN);
        rtcVideo.setRemoteVideoCanvas(remoteStreamKey, null);
    }

    final IRTCVideoEventHandler rtcVideoEventHandler = new IRTCVideoEventHandler() {
        @Override
        public void onWarning(int warn) {
            super.onWarning(warn);
            ToastUtil.showLongToast(QuickStartActivity.this, "onError:" + warn);
        }

        @Override
        public void onAudioDeviceStateChanged(String deviceID, AudioDeviceType deviceType, int deviceState, int deviceError) {
            super.onAudioDeviceStateChanged(deviceID, deviceType, deviceState, deviceError);
            Log.d(TAG, "onAudioDeviceStateChanged: deviceID=" + deviceID
                    + "; deviceType=" + deviceType
                    + "; deviceState=" + formatMediaDeviceState(deviceState)
                    + "; deviceError=" + formatMediaDeviceError(deviceError));
        }


        @Override
        public void onAudioDeviceWarning(String deviceID, AudioDeviceType deviceType, int deviceWarning) {
            super.onAudioDeviceWarning(deviceID, deviceType, deviceWarning);
            Log.d(TAG, "onAudioDeviceWarning: deviceID=" + deviceID
                    + "; deviceType=" + deviceType
                    + "; deviceWarning=" + formatMediaDeviceWarning(deviceWarning));
        }

        @Override
        public void onError(int err) {
            super.onError(err);
            runOnUiThread(() -> ToastUtil.showLongToast(QuickStartActivity.this, "onError:" + err));
        }
    };

    final IRTCRoomEventHandler rtcRoomEventHandler = new IRTCRoomEventHandler() {
        @Override
        public void onRoomStateChanged(String roomId, String uid, int state, String extraInfo) {
            super.onRoomStateChanged(roomId, uid, state, extraInfo);
            String info = String.format(Locale.ENGLISH, "roomId:%s, uid:%s, state:%d, extraInfo:%s", roomId, uid, state, extraInfo);
            ToastUtil.showToast(QuickStartActivity.this, info);
        }

        @Override
        public void onUserPublishStream(String uid, MediaStreamType type) {
            super.onUserPublishStream(uid, type);
            runOnUiThread(() -> {
                setRemoteRenderView(uid);
            });
        }

        @Override
        public void onUserUnpublishStream(String uid, MediaStreamType type, StreamRemoveReason reason) {
            super.onUserUnpublishStream(uid, type, reason);
            runOnUiThread(() -> {
                removeRemoteView(uid);
            });
        }

        @Override
        public void onLeaveRoom(RTCRoomStats stats) {
            super.onLeaveRoom(stats);
            ToastUtil.showLongToast(QuickStartActivity.this, "onLeaveRoom, stats:" + stats.toString());
        }

        @Override
        public void onTokenWillExpire() {
            super.onTokenWillExpire();
            ToastUtil.showToast(QuickStartActivity.this, R.string.toast_token_will_expire);
        }
    };

    @Override
    protected void onDestroy() {
        super.onDestroy();
        if (rtcRoom != null) {
            rtcRoom.destroy();
            rtcRoom = null;
        }
        RTCVideo.destroyRTCVideo();
        rtcVideo = null;
    }
}