package com.vertc.api.example.examples.audio;

import android.os.Bundle;
import android.util.Log;
import android.view.TextureView;

import com.ss.bytertc.engine.IAudioFrameObserver;
import com.ss.bytertc.engine.RTCRoom;
import com.ss.bytertc.engine.RTCRoomConfig;
import com.ss.bytertc.engine.RTCVideo;
import com.ss.bytertc.engine.UserInfo;
import com.ss.bytertc.engine.VideoCanvas;
import com.ss.bytertc.engine.data.AudioChannel;
import com.ss.bytertc.engine.data.AudioFormat;
import com.ss.bytertc.engine.data.AudioFrameCallbackMethod;
import com.ss.bytertc.engine.data.AudioSampleRate;
import com.ss.bytertc.engine.data.RemoteStreamKey;
import com.ss.bytertc.engine.data.StreamIndex;
import com.ss.bytertc.engine.handler.IRTCRoomEventHandler;
import com.ss.bytertc.engine.handler.IRTCVideoEventHandler;
import com.ss.bytertc.engine.type.ChannelProfile;
import com.ss.bytertc.engine.type.RTCRoomStats;
import com.ss.bytertc.engine.utils.IAudioFrame;
import com.vertc.api.example.R;
import com.vertc.api.example.base.ExampleBaseActivity;
import com.vertc.api.example.base.ExampleCategory;
import com.vertc.api.example.base.annotation.ApiExample;
import com.vertc.api.example.databinding.ActivityRawAudioBinding;
import com.vertc.api.example.utils.IMEUtils;
import com.vertc.api.example.utils.RTCHelper;
import com.vertc.api.example.utils.ToastUtil;

import java.util.Locale;

/**
 * <pre>
 * Function name: BytePlusRTC raw audio data.
 * Function brief: Get raw audio data of the specified type by registering the callback interface
 * Notes:
 *   1. The data received through the ByteRTCAudioFrameObserver callback cannot be modified. If you want to process audio before sending it, use the custom audio processing interface.
 *   2. For demonstration purposes, all tokens for the functionalities are generated by the client-side TokenGenerator class. However, please adjust accordingly based on the specific circumstances when integrating in a real environment.
 * Reference document: https://docs.byteplus.com/en/docs/byteplus-rtc/docs-1178324
 * </pre>
 */
@ApiExample(title = "Raw audio data", category = ExampleCategory.AUDIO, order = 1)
public class RawAudioDataActivity extends ExampleBaseActivity {

    private static final String TAG = "RawAudioDataActivity";

    RTCVideo rtcVideo;
    RTCRoom rtcRoom;

    boolean isShowRecordDataLog;
    boolean isShowMixDataLog;
    boolean isShowPlaybackDataLog;
    boolean isShowRemoteUserDataLog;

    ActivityRawAudioBinding binding;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        binding = ActivityRawAudioBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot());

        binding.getRoot().setOnClickListener(IMEUtils::closeIME);

        binding.btnJoinRoom.setOnClickListener(v -> {
            if (v.isSelected()) {
                leaveRoom();

                v.setSelected(false);
                binding.btnJoinRoom.setText(R.string.button_join_room);
                return;
            }
            String roomId = binding.roomIdInput.getText().toString();
            if (!RTCHelper.checkValid(roomId)) {
                ToastUtil.showToast(this, R.string.toast_check_valid_false);
                return;
            }
            joinRoom(roomId);

            v.setSelected(true);
            binding.btnJoinRoom.setText(R.string.button_leave_room);
        });

        binding.audioCallbackRecord.setOnCheckedChangeListener((buttonView, isChecked) -> {
            if (isChecked) {
                AudioFormat format = new AudioFormat(AudioSampleRate.AUDIO_SAMPLE_RATE_48000, AudioChannel.AUDIO_CHANNEL_STEREO);
                rtcVideo.enableAudioFrameCallback(AudioFrameCallbackMethod.AUDIO_FRAME_CALLBACK_RECORD, format);
            } else {
                rtcVideo.disableAudioFrameCallback(AudioFrameCallbackMethod.AUDIO_FRAME_CALLBACK_RECORD);
            }
            isShowRecordDataLog = false;
        });
        binding.audioCallbackPlayback.setOnCheckedChangeListener((buttonView, isChecked) -> {
            if (isChecked) {
                AudioFormat format = new AudioFormat(AudioSampleRate.AUDIO_SAMPLE_RATE_48000, AudioChannel.AUDIO_CHANNEL_STEREO);
                rtcVideo.enableAudioFrameCallback(AudioFrameCallbackMethod.AUDIO_FRAME_CALLBACK_PLAYBACK, format);
            } else {
                rtcVideo.disableAudioFrameCallback(AudioFrameCallbackMethod.AUDIO_FRAME_CALLBACK_PLAYBACK);
            }
            isShowPlaybackDataLog = false;
        });
        binding.audioCallbackMixed.setOnCheckedChangeListener((buttonView, isChecked) -> {
            if (isChecked) {
                AudioFormat format = new AudioFormat(AudioSampleRate.AUDIO_SAMPLE_RATE_48000, AudioChannel.AUDIO_CHANNEL_MONO);
                rtcVideo.enableAudioFrameCallback(AudioFrameCallbackMethod.AUDIO_FRAME_CALLBACK_MIXED, format);
            } else {
                rtcVideo.disableAudioFrameCallback(AudioFrameCallbackMethod.AUDIO_FRAME_CALLBACK_MIXED);
            }
            isShowMixDataLog = false;
        });
        binding.audioCallbackRemoteUser.setOnCheckedChangeListener((buttonView, isChecked) -> {
            if (isChecked) {
                AudioFormat audioFormat = new AudioFormat(AudioSampleRate.AUDIO_SAMPLE_RATE_AUTO, AudioChannel.AUDIO_CHANNEL_AUTO);
                rtcVideo.enableAudioFrameCallback(AudioFrameCallbackMethod.AUDIO_FRAME_CALLBACK_REMOTE_USER, audioFormat);
            } else {
                rtcVideo.disableAudioFrameCallback(AudioFrameCallbackMethod.AUDIO_FRAME_CALLBACK_REMOTE_USER);
            }
            isShowRemoteUserDataLog = false;
        });

        rtcVideo = RTCHelper.createRTCVideo(this, rtcVideoEventHandler);
        setLocalRenderView();
        rtcVideo.startVideoCapture();
        rtcVideo.startAudioCapture();

        rtcVideo.registerAudioFrameObserver(audioFrameObserver);
    }

    private final IAudioFrameObserver audioFrameObserver = new IAudioFrameObserver() {
        @Override
        public void onRecordAudioFrame(IAudioFrame audioFrame) {
            Log.i(TAG, "onRecordAudioFrame:");
            if (!isShowRecordDataLog) {
                ToastUtil.showToast(RawAudioDataActivity.this, "onRecordAudioFrame");
                isShowRecordDataLog = true;
            }
        }

        @Override
        public void onPlaybackAudioFrame(IAudioFrame audioFrame) {
            Log.i(TAG, "onPlaybackAudioFrame:");
            if (!isShowPlaybackDataLog) {
                ToastUtil.showToast(RawAudioDataActivity.this, "onPlaybackAudioFrame");
                isShowPlaybackDataLog = true;
            }
        }

        @Override
        public void onRemoteUserAudioFrame(RemoteStreamKey streamKey, IAudioFrame audioFrame) {
            Log.i(TAG, "onRemoteUserAudioFrame:" + streamKey);
            if (!isShowRemoteUserDataLog) {
                ToastUtil.showToast(RawAudioDataActivity.this, "onRemoteUserAudioFrame");
                isShowRemoteUserDataLog = true;
            }
        }

        @Override
        public void onMixedAudioFrame(IAudioFrame audioFrame) {
            Log.i(TAG, "onMixedAudioFrame:");
            if (!isShowMixDataLog) {
                ToastUtil.showToast(RawAudioDataActivity.this, "onMixedAudioFrame");
                isShowMixDataLog = true;
            }
        }
    };

    private void setLocalRenderView() {
        TextureView textureView = new TextureView(this);
        binding.localViewContainer.removeAllViews();
        binding.localViewContainer.addView(textureView);

        VideoCanvas videoCanvas = new VideoCanvas();
        videoCanvas.renderView = textureView;
        videoCanvas.renderMode = VideoCanvas.RENDER_MODE_HIDDEN;
        rtcVideo.setLocalVideoCanvas(StreamIndex.STREAM_INDEX_MAIN, videoCanvas);

    }

    private void joinRoom(String roomId) {
        requestRoomToken(roomId, localUid, token -> {
            rtcRoom = rtcVideo.createRTCRoom(roomId);
            rtcRoom.setRTCRoomEventHandler(rtcRoomEventHandler);
            UserInfo userInfo = new UserInfo(localUid, "");
            boolean isAutoPublish = true;
            boolean isAutoSubscribeAudio = true;
            boolean isAutoSubscribeVideo = true;
            RTCRoomConfig roomConfig = new RTCRoomConfig(
                    ChannelProfile.CHANNEL_PROFILE_CHAT_ROOM,
                    isAutoPublish,
                    isAutoSubscribeAudio,
                    isAutoSubscribeVideo);
            rtcRoom.joinRoom(token, userInfo, roomConfig);
        });
    }

    private void leaveRoom() {
        if (rtcRoom != null) {
            rtcRoom.leaveRoom();
            rtcRoom.destroy();
            rtcRoom = null;
        }
    }

    IRTCVideoEventHandler rtcVideoEventHandler = new IRTCVideoEventHandler() {
    };

    IRTCRoomEventHandler rtcRoomEventHandler = new IRTCRoomEventHandler() {
        @Override
        public void onRoomStateChanged(String roomId, String uid, int state, String extraInfo) {
            super.onRoomStateChanged(roomId, uid, state, extraInfo);
            String info = String.format(Locale.ENGLISH, "roomId:%s, uid:%s, state:%d, extraInfo:%s", roomId, uid, state, extraInfo);
            ToastUtil.showLongToast(RawAudioDataActivity.this, info);
        }

        @Override
        public void onLeaveRoom(RTCRoomStats stats) {
            super.onLeaveRoom(stats);
            ToastUtil.showLongToast(RawAudioDataActivity.this, "onLeaveRoom, stats:" + stats);
        }
    };

    @Override
    protected void onDestroy() {
        super.onDestroy();
        leaveRoom();
        if (rtcVideo != null) {
            rtcVideo.stopAudioCapture();
            rtcVideo.stopVideoCapture();
        }
        RTCVideo.destroyRTCVideo();
        rtcVideo = null;
    }
}