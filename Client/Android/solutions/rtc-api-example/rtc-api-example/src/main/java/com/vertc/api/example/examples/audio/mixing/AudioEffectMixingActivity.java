package com.vertc.api.example.examples.audio.mixing;

import android.os.Bundle;
import android.text.TextUtils;
import android.util.Log;
import android.view.TextureView;
import android.widget.SeekBar;

import com.ss.bytertc.engine.IAudioEffectPlayerEventHandler;
import com.ss.bytertc.engine.RTCRoom;
import com.ss.bytertc.engine.RTCRoomConfig;
import com.ss.bytertc.engine.RTCVideo;
import com.ss.bytertc.engine.UserInfo;
import com.ss.bytertc.engine.VideoCanvas;
import com.ss.bytertc.engine.audio.IAudioEffectPlayer;
import com.ss.bytertc.engine.data.AudioEffectPlayerConfig;
import com.ss.bytertc.engine.data.AudioMixingType;
import com.ss.bytertc.engine.data.PlayerError;
import com.ss.bytertc.engine.data.PlayerState;
import com.ss.bytertc.engine.data.StreamIndex;
import com.ss.bytertc.engine.handler.IRTCRoomEventHandler;
import com.ss.bytertc.engine.handler.IRTCVideoEventHandler;
import com.ss.bytertc.engine.type.ChannelProfile;
import com.ss.bytertc.engine.type.RTCRoomStats;
import com.vertc.api.example.R;
import com.vertc.api.example.adapter.OnSeekBarChangeAdapter;
import com.vertc.api.example.base.ExampleBaseActivity;
import com.vertc.api.example.base.ExampleCategory;
import com.vertc.api.example.base.annotation.ApiExample;
import com.vertc.api.example.databinding.ActivityAudioEffectMixingBinding;
import com.vertc.api.example.databinding.LayoutAudioEffectMixingCardBinding;
import com.vertc.api.example.utils.IMEUtils;
import com.vertc.api.example.utils.RTCHelper;
import com.vertc.api.example.utils.ToastUtil;

import java.util.Locale;

/**
 * <pre>
 * Function name: BytePlusRTC sound effects mixing.
 * Function brief: If you need to play sound effects during a call and ensure that all members in the room can hear the audio, you will need to use the audio mixing function. This function can combine the audio data captured by the microphone with audio files, PCM audio data, etc. into a single audio stream. The mixed audio stream is then published within the room, allowing all members to hear the combined audio during the call.
 * Notes:
 *  1. For demonstration purposes, all tokens for the functionalities are generated by the client-side TokenGenerator class. However, please adjust accordingly based on the specific circumstances when integrating in a real environment.
 * Reference document: https://docs.byteplus.com/en/docs/byteplus-rtc/docs-1178326
 * </pre>
 */
@ApiExample(title = "Audio effect mixing", category = ExampleCategory.AUDIO, order = 2)
public class AudioEffectMixingActivity extends ExampleBaseActivity {
    private static final String TAG = "AudioEffectMixing";

    private RTCVideo rtcVideo;
    private RTCRoom rtcRoom;
    private IAudioEffectPlayer effectPlayer;

    private static final int EFFECT_ID_1 = 1;
    private static final int EFFECT_ID_2 = 2;

    private static final String path1 = "/assets/rtc_audio.aac";

    ActivityAudioEffectMixingBinding binding;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        binding = ActivityAudioEffectMixingBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot());

        binding.content.setOnClickListener(IMEUtils::closeIME);

        initUI(binding);

        rtcVideo = RTCHelper.createRTCVideo(this, rtcVideoEventHandler);
        rtcVideo.startAudioCapture();
        rtcVideo.startVideoCapture();
        setLocalRenderView();

        effectPlayer = rtcVideo.getAudioEffectPlayer();
        effectPlayer.setEventHandler(effectPlayerEventHandler);
    }


    private void initUI(ActivityAudioEffectMixingBinding binding) {
        binding.btnJoinRoom.setOnClickListener(v -> {
            if (v.isSelected()) {
                leaveRoom();

                v.setSelected(false);
                binding.btnJoinRoom.setText(R.string.button_join_room);
                return;
            }

            String roomId = this.binding.roomIdInput.getText().toString();
            if (!RTCHelper.checkValid(roomId)) {
                ToastUtil.showToast(this, R.string.toast_check_valid_false);
                return;
            }
            joinRoom(roomId);
            v.setSelected(true);
            binding.btnJoinRoom.setText(R.string.button_leave_room);
        });

        setupMixingFileUI(binding.mixingFile);
        setupMixingUrlUI(binding.mixingUrl);


        binding.btnStopAll.setOnClickListener(v -> effectPlayer.stopAll());
        binding.btnResumeAll.setOnClickListener(v -> effectPlayer.resumeAll());
        binding.btnPauseAll.setOnClickListener(v -> effectPlayer.pauseAll());
        binding.volumeAllBar.setOnSeekBarChangeListener(new OnSeekBarChangeAdapter() {
            @Override
            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
                effectPlayer.setVolumeAll(progress);
                binding.volumeAllText.setText(String.valueOf(progress));
            }
        });
    }

    private void setupMixingFileUI(LayoutAudioEffectMixingCardBinding binding) {
        binding.title.setText(R.string.label_mixing_file_title);
        binding.resourceLabel.setText(R.string.label_mixing_file_label);
        binding.resourceInput.setText(path1);

        binding.btnPreload.setOnClickListener(v -> effectPlayer.preload(EFFECT_ID_1, path1));
        binding.btnUnload.setOnClickListener(v -> effectPlayer.unload(EFFECT_ID_1));

        binding.progressInputConfirm.setOnClickListener(v -> {
            String input = binding.progressInput.getText().toString().trim();
            try {
                double progress = Double.parseDouble(input);
                effectPlayer.setPosition(EFFECT_ID_1, (int) progress);
            } catch (NumberFormatException ignored) {

            }
        });

        binding.btnPlay.setOnClickListener(v -> startEffect(EFFECT_ID_1, path1));
        binding.btnStop.setOnClickListener(v -> effectPlayer.stop(EFFECT_ID_1));
        binding.btnPause.setOnClickListener(v -> effectPlayer.pause(EFFECT_ID_1));
        binding.btnResume.setOnClickListener(v -> effectPlayer.resume(EFFECT_ID_1));
        binding.volumeBar.setOnSeekBarChangeListener(new OnSeekBarChangeAdapter() {
            @Override
            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
                effectPlayer.setVolume(EFFECT_ID_1, progress);
                binding.volumeText.setText(String.valueOf(progress));
            }
        });
    }

    private void setupMixingUrlUI(LayoutAudioEffectMixingCardBinding binding) {
        binding.title.setText(R.string.label_mixing_url_title);
        binding.resourceLabel.setText(R.string.label_mixing_url_label);
        binding.resourceInput.setEnabled(true);

        binding.btnPreload.setOnClickListener(v -> {
            String url = binding.resourceInput.getText().toString().trim();
            if (TextUtils.isEmpty(url)) {
                ToastUtil.showToast(this, R.string.toast_input_is_empty);
                return;
            }
            effectPlayer.preload(EFFECT_ID_2, url);
        });
        binding.btnUnload.setOnClickListener(v -> effectPlayer.unload(EFFECT_ID_2));

        binding.progressInputConfirm.setOnClickListener(v -> {
            String input = binding.progressInput.getText().toString().trim();
            try {
                double progress = Double.parseDouble(input);
                effectPlayer.setPosition(EFFECT_ID_2, (int) progress);
            } catch (NumberFormatException ignored) {

            }
        });

        binding.btnPlay.setOnClickListener(v -> {
            String url = binding.resourceInput.getText().toString().trim();
            if (TextUtils.isEmpty(url)) {
                ToastUtil.showToast(this, R.string.toast_input_is_empty);
                return;
            }
            startEffect(EFFECT_ID_2, url);
        });
        binding.btnStop.setOnClickListener(v -> effectPlayer.stop(EFFECT_ID_2));
        binding.btnPause.setOnClickListener(v -> effectPlayer.pause(EFFECT_ID_2));
        binding.btnResume.setOnClickListener(v -> effectPlayer.resume(EFFECT_ID_2));
        binding.volumeBar.setOnSeekBarChangeListener(new OnSeekBarChangeAdapter() {
            @Override
            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
                effectPlayer.setVolume(EFFECT_ID_2, progress);
                binding.volumeText.setText(String.valueOf(progress));
            }
        });
    }

    private void setLocalRenderView() {
        TextureView textureView = new TextureView(this);
        binding.localViewContainer.removeAllViews();
        binding.localViewContainer.addView(textureView);

        VideoCanvas videoCanvas = new VideoCanvas();
        videoCanvas.renderView = textureView;
        videoCanvas.renderMode = VideoCanvas.RENDER_MODE_HIDDEN;
        rtcVideo.setLocalVideoCanvas(StreamIndex.STREAM_INDEX_MAIN, videoCanvas);
    }

    private void startEffect(int effectId, String path) {
        AudioEffectPlayerConfig playerConfig = new AudioEffectPlayerConfig();
        playerConfig.type = AudioMixingType.AUDIO_MIXING_TYPE_PLAYOUT_AND_PUBLISH;
        playerConfig.startPos = 0;
        playerConfig.playCount = 1;
        playerConfig.pitch = 0;
        effectPlayer.start(effectId, path, playerConfig);
    }

    private void joinRoom(String roomId) {
        requestRoomToken(roomId, localUid, token -> {
            rtcRoom = rtcVideo.createRTCRoom(roomId);
            rtcRoom.setRTCRoomEventHandler(rtcRoomEventHandler);
            UserInfo userInfo = new UserInfo(localUid, "");
            boolean isAutoPublish = true;
            boolean isAutoSubscribeAudio = true;
            boolean isAutoSubscribeVideo = true;
            RTCRoomConfig roomConfig = new RTCRoomConfig(
                    ChannelProfile.CHANNEL_PROFILE_CHAT_ROOM,
                    isAutoPublish,
                    isAutoSubscribeAudio,
                    isAutoSubscribeVideo);
            rtcRoom.joinRoom(token, userInfo, roomConfig);
        });
    }

    private void leaveRoom() {
        if (rtcRoom != null) {
            rtcRoom.leaveRoom();
            rtcRoom.destroy();
            rtcRoom = null;
        }
    }

    final IAudioEffectPlayerEventHandler effectPlayerEventHandler = new IAudioEffectPlayerEventHandler() {
        @Override
        public void onAudioEffectPlayerStateChanged(int effectId, PlayerState state, PlayerError error) {
            runOnUiThread(() -> {
                String msg = String.format(Locale.ENGLISH, "onAudioEffectPlayerStateChanged: effectId:%d, state:%s, error:%s", effectId, state, error);
                Log.d(TAG, msg);
                ToastUtil.showToast(AudioEffectMixingActivity.this, msg);
                if (state == PlayerState.PLAYING && error == PlayerError.OK) {
                    if (effectId == EFFECT_ID_1) {
                        int duration = effectPlayer.getDuration(EFFECT_ID_1);
                        binding.mixingFile.labelTotalTimeLength.setText(getString(R.string.label_total_time_length_xxx, duration));
                    } else if (effectId == EFFECT_ID_2) {
                        int duration = effectPlayer.getDuration(EFFECT_ID_2);
                        binding.mixingUrl.labelTotalTimeLength.setText(getString(R.string.label_total_time_length_xxx, duration));
                    }
                } else if (state == PlayerState.STOPPED && error == PlayerError.OK) {
                    if (effectId == EFFECT_ID_1) {
                        binding.mixingFile.labelTotalTimeLength.setText(R.string.label_total_time_length);
                    } else if (effectId == EFFECT_ID_2) {
                        binding.mixingUrl.labelTotalTimeLength.setText(R.string.label_total_time_length);
                    }
                }
            });
        }
    };

    IRTCVideoEventHandler rtcVideoEventHandler = new IRTCVideoEventHandler() {
    };

    IRTCRoomEventHandler rtcRoomEventHandler = new IRTCRoomEventHandler() {
        @Override
        public void onRoomStateChanged(String roomId, String uid, int state, String extraInfo) {
            super.onRoomStateChanged(roomId, uid, state, extraInfo);
            String info = String.format(Locale.ENGLISH, "onRoomStateChanged,roomId:%s, uid:%s, state:%d, extraInfo:%s", roomId, uid, state, extraInfo);
            ToastUtil.showToast(AudioEffectMixingActivity.this, info);
        }

        @Override
        public void onLeaveRoom(RTCRoomStats stats) {
            super.onLeaveRoom(stats);
            ToastUtil.showLongToast(AudioEffectMixingActivity.this, "onLeaveRoom, stats:" + stats.toString());
        }

        @Override
        public void onUserJoined(UserInfo userInfo, int elapsed) {
            super.onUserJoined(userInfo, elapsed);
            ToastUtil.showToast(AudioEffectMixingActivity.this, "onUserJoined, uid:" + userInfo.getUid());
        }

        @Override
        public void onUserLeave(String uid, int reason) {
            super.onUserLeave(uid, reason);
            String info = String.format("onUserLeave, uid:%s, reason:%s", uid, reason + "");
            ToastUtil.showLongToast(AudioEffectMixingActivity.this, info);
        }
    };

    @Override
    protected void onDestroy() {
        super.onDestroy();
        leaveRoom();
        if (rtcVideo != null) {
            rtcVideo.stopAudioCapture();
            rtcVideo.stopVideoCapture();
        }
        RTCVideo.destroyRTCVideo();
        rtcVideo = null;
    }
}