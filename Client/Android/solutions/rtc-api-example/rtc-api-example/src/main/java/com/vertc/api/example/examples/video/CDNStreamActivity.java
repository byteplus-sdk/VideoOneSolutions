package com.vertc.api.example.examples.video;

import android.os.Bundle;
import android.util.Log;
import android.view.TextureView;
import android.widget.FrameLayout;

import androidx.annotation.Size;

import com.ss.bytertc.engine.RTCRoom;
import com.ss.bytertc.engine.RTCRoomConfig;
import com.ss.bytertc.engine.RTCVideo;
import com.ss.bytertc.engine.UserInfo;
import com.ss.bytertc.engine.VideoCanvas;
import com.ss.bytertc.engine.data.RemoteStreamKey;
import com.ss.bytertc.engine.data.StreamIndex;
import com.ss.bytertc.engine.handler.IRTCRoomEventHandler;
import com.ss.bytertc.engine.handler.IRTCVideoEventHandler;
import com.ss.bytertc.engine.live.ByteRTCStreamMixingEvent;
import com.ss.bytertc.engine.live.ByteRTCStreamMixingType;
import com.ss.bytertc.engine.live.ByteRTCTranscoderErrorCode;
import com.ss.bytertc.engine.live.IMixedStreamObserver;
import com.ss.bytertc.engine.live.MixedStreamConfig;
import com.ss.bytertc.engine.live.MixedStreamType;
import com.ss.bytertc.engine.type.ChannelProfile;
import com.ss.bytertc.engine.type.MediaStreamType;
import com.ss.bytertc.engine.type.RTCRoomStats;
import com.ss.bytertc.engine.type.StreamRemoveReason;
import com.ss.bytertc.engine.video.VideoFrame;
import com.vertc.api.example.R;
import com.vertc.api.example.base.ExampleBaseActivity;
import com.vertc.api.example.base.ExampleCategory;
import com.vertc.api.example.base.annotation.ApiExample;
import com.vertc.api.example.databinding.ActivityCdnStreamBinding;
import com.vertc.api.example.utils.IMEUtils;
import com.vertc.api.example.utils.RTCHelper;
import com.vertc.api.example.utils.RTMPLinkGenerator;
import com.vertc.api.example.utils.ToastUtil;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Locale;

/**
 * <pre>
 * Function name: BytePlusRTC push stream to CDN.
 * Function brief: You can combine multiple audio and video streams from within an video call into a single stream. This merged stram can then be pushed to a specified streaming address, typically a CDN (Content Delivery Network) address.
 * Notes:
 *  1. This demo demonstrates pushing mixed stream to CDN,
 *  1.1 When using a layout that displays 4 views in 1 row, each stream will occupy a width of 0.25 and a height of 1 in the layout.
 *  1.2 In a four-grid layout, each stream will occupy a width of 0.5 and a height of 0.5 within the layout.
 *  1.3 Up to four streams can be displayed in the room.
 *  2. For demonstration purposes, all tokens for the functionalities are generated by the client-side TokenGenerator class. However, please adjust accordingly based on the specific circumstances when integrating in a real environment.
 * Reference document: https://docs.byteplus.com/en/docs/byteplus-rtc/docs-69817
 * </pre>
 */
@ApiExample(title = "Push Stream to CDN", category = ExampleCategory.VIDEO, order = 4)
public class CDNStreamActivity extends ExampleBaseActivity {
    private static final String TAG = "CDNStreamActivity";
    private String roomID;
    private static final String CDN_TASK_ID = "1";
    private FrameLayout localViewContainer;
    @Size(3)
    private final FrameLayout[] remoteContainers = new FrameLayout[3];
    private final HashMap<String, Integer> remoteUserViewMap = new HashMap<>();
    private final ArrayList<String> userNameList = new ArrayList<>();
    @Size(3)
    private final boolean[] isRemoteViewUsed = new boolean[3];
    private RTCVideo rtcVideo;
    private RTCRoom rtcRoom;

    private MixedStreamConfig mixedStreamConfig;
    ActivityCdnStreamBinding binding;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        binding = ActivityCdnStreamBinding.inflate(getLayoutInflater());

        setContentView(binding.getRoot());

        binding.content.setOnClickListener(IMEUtils::closeIME);

        initUI(binding);

        rtcVideo = RTCHelper.createRTCVideo(this, videoEventHandler);
        setLocalRenderView();
        rtcVideo.startVideoCapture();
        rtcVideo.startAudioCapture();

        userNameList.add(localUid);

        mixedStreamConfig = MixedStreamConfig.defaultMixedStreamConfig();
    }

    private void initUI(ActivityCdnStreamBinding binding) {
        localViewContainer = binding.localViewContainer;
        remoteContainers[0] = binding.remoteViewContainer1;
        remoteContainers[1] = binding.remoteViewContainer2;
        remoteContainers[2] = binding.remoteViewContainer3;

        binding.btnJoinRoom.setOnClickListener(v -> {
            if (v.isSelected()) {
                leaveRoom();

                v.setSelected(false);
                binding.btnJoinRoom.setText(R.string.button_join_room);
                return;
            }
            String roomId = binding.roomIdInput.getText().toString();
            if (!RTCHelper.checkValid(roomId)) {
                ToastUtil.showToast(this, R.string.toast_check_valid_false);
                return;
            }
            joinRoom(roomId);
            v.setSelected(true);
            binding.btnJoinRoom.setText(R.string.button_leave_room);

            String rtmpUrl = RTMPLinkGenerator.create(CDN_TASK_ID);
            if (rtmpUrl != null) {
                binding.cdnAddressInput.setText(rtmpUrl);
            }
        });

        binding.btnStartPush.setOnClickListener(v -> startPushCDNStream());
        binding.btnUpdatePushConfig.setOnClickListener(v -> updateCDNStreamConfig());
        binding.btnStopPush.setOnClickListener(v -> stopPushCDNStream());
    }

    private void setLocalRenderView() {
        TextureView textureView = new TextureView(this);
        localViewContainer.removeAllViews();
        localViewContainer.addView(textureView);

        VideoCanvas videoCanvas = new VideoCanvas();
        videoCanvas.renderView = textureView;
        videoCanvas.renderMode = VideoCanvas.RENDER_MODE_HIDDEN;
        rtcVideo.setLocalVideoCanvas(StreamIndex.STREAM_INDEX_MAIN, videoCanvas);
    }

    private void setRemoteRenderView(String uid) {
        for (int i = 0; i < isRemoteViewUsed.length; i++) {
            if (!isRemoteViewUsed[i]) {
                isRemoteViewUsed[i] = true;
                remoteUserViewMap.put(uid, i);

                TextureView textureView = new TextureView(this);
                remoteContainers[i].removeAllViews();
                remoteContainers[i].addView(textureView);

                RemoteStreamKey remoteStreamKey = new RemoteStreamKey(roomID, uid, StreamIndex.STREAM_INDEX_MAIN);
                VideoCanvas videoCanvas = new VideoCanvas();
                videoCanvas.renderView = textureView;
                videoCanvas.renderMode = VideoCanvas.RENDER_MODE_HIDDEN;
                rtcVideo.setRemoteVideoCanvas(remoteStreamKey, videoCanvas);
                break;
            }
        }
    }

    private void removeRemoteView(String uid) {
        int index = remoteUserViewMap.get(uid);
        if (index >= 0 && index < 3) {
            remoteContainers[index].removeAllViews();
            isRemoteViewUsed[index] = false;
        }
        remoteUserViewMap.remove(uid);

        RemoteStreamKey remoteStreamKey = new RemoteStreamKey(roomID, uid, StreamIndex.STREAM_INDEX_MAIN);
        rtcVideo.setRemoteVideoCanvas(remoteStreamKey, null);

    }

    private void joinRoom(String roomId) {
        requestRoomToken(roomId, localUid, token -> {
            this.roomID = roomId;
            rtcRoom = rtcVideo.createRTCRoom(roomId);
            rtcRoom.setRTCRoomEventHandler(rtcRoomEventHandler);
            UserInfo userInfo = new UserInfo(localUid, "");
            boolean isAutoPublish = true;
            boolean isAutoSubscribeAudio = true;
            boolean isAutoSubscribeVideo = true;
            RTCRoomConfig roomConfig = new RTCRoomConfig(
                    ChannelProfile.CHANNEL_PROFILE_CHAT_ROOM,
                    isAutoPublish,
                    isAutoSubscribeAudio,
                    isAutoSubscribeVideo);
            rtcRoom.joinRoom(token, userInfo, roomConfig);
        });
    }

    private void leaveRoom() {
        if (rtcRoom != null) {
            rtcRoom.leaveRoom();
            rtcRoom.destroy();
            rtcRoom = null;
        }
    }

    private void startPushCDNStream() {
        String cdnAddr = binding.cdnAddressInput.getText().toString();
        if (cdnAddr.isEmpty()) {
            ToastUtil.showToast(this, R.string.toast_cdn_url_is_empty);
            return;
        }
        Log.d(TAG, "url=" + cdnAddr);

        String backgroundColor = binding.layoutColorInput.getText().toString();

        mixedStreamConfig.setUserID(localUid);
        mixedStreamConfig.setRoomID(roomID);
        mixedStreamConfig.setPushURL(cdnAddr);
        mixedStreamConfig.setExpectedMixingType(ByteRTCStreamMixingType.STREAM_MIXING_BY_SERVER);

        MixedStreamConfig.MixedStreamLayoutConfig layoutConfig = new MixedStreamConfig.MixedStreamLayoutConfig();
        layoutConfig.setBackgroundColor(backgroundColor);
        layoutConfig.setRegions(getLayoutRegions());

        mixedStreamConfig.setLayout(layoutConfig);
        rtcVideo.startPushMixedStreamToCDN(CDN_TASK_ID, mixedStreamConfig, mixedStreamObserver);
    }

    private void updateCDNStreamConfig() {
        String cdnAddr = binding.cdnAddressInput.getText().toString();
        if (cdnAddr.isEmpty()) {
            ToastUtil.showToast(this, R.string.toast_cdn_url_is_empty);
            return;
        }
        Log.d(TAG, "url=" + cdnAddr);

        String backgroundColor = binding.layoutColorInput.getText().toString();

        mixedStreamConfig.setPushURL(cdnAddr);

        MixedStreamConfig.MixedStreamLayoutConfig layoutConfig = new MixedStreamConfig.MixedStreamLayoutConfig();
        layoutConfig.setBackgroundColor(backgroundColor);
        layoutConfig.setRegions(getLayoutRegions());
        mixedStreamConfig.setLayout(layoutConfig);

        rtcVideo.updatePushMixedStreamToCDN(CDN_TASK_ID, mixedStreamConfig);
    }

    private void stopPushCDNStream() {
        rtcVideo.stopPushStreamToCDN(CDN_TASK_ID);
    }

    private MixedStreamConfig.MixedStreamLayoutRegionConfig[] getLayoutRegions() {
        int userNum = Math.min(4, userNameList.size());

        MixedStreamConfig.MixedStreamLayoutRegionConfig[] regions = new MixedStreamConfig.MixedStreamLayoutRegionConfig[userNum];
        String mode = (String) binding.layoutModeSpinner.getSelectedItem();
        if ("1x4".equals(mode)) {
            for (int index = 0; index < userNum; index++) {
                final String uid = userNameList.get(index);
                MixedStreamConfig.MixedStreamLayoutRegionConfig region = new MixedStreamConfig.MixedStreamLayoutRegionConfig();
                region.setRoomID(roomID);
                region.setUserID(uid);
                region.setLocationX(0.25 * index);
                region.setLocationY(0.0);
                region.setWidthProportion(0.25);
                region.setHeightProportion(1.0);
                region.setAlpha(1);
                region.setZOrder(0);
                region.setRenderMode(MixedStreamConfig.MixedStreamRenderMode.MIXED_STREAM_RENDER_MODE_HIDDEN);
                region.setStreamType(MixedStreamConfig.MixedStreamLayoutRegionConfig.MixedStreamVideoType.MIXED_STREAM_VIDEO_TYPE_MAIN);
                region.setMediaType(MixedStreamConfig.MixedStreamMediaType.MIXED_STREAM_MEDIA_TYPE_AUDIO_AND_VIDEO);
                regions[index] = region;
            }
        } else if ("2x2".equals(mode)) {
            for (int index = 0; index < userNum; index++) {
                final String uid = userNameList.get(index);
                MixedStreamConfig.MixedStreamLayoutRegionConfig region = new MixedStreamConfig.MixedStreamLayoutRegionConfig();
                region.setRoomID(roomID);
                region.setUserID(uid);
                region.setLocationX((index % 2) * 0.5);
                region.setLocationY((index / 2) * 0.5);
                region.setWidthProportion(0.5);
                region.setHeightProportion(0.5);
                region.setAlpha(1);
                region.setZOrder(0);
                region.setRenderMode(MixedStreamConfig.MixedStreamRenderMode.MIXED_STREAM_RENDER_MODE_HIDDEN);
                region.setStreamType(MixedStreamConfig.MixedStreamLayoutRegionConfig.MixedStreamVideoType.MIXED_STREAM_VIDEO_TYPE_MAIN);
                region.setMediaType(MixedStreamConfig.MixedStreamMediaType.MIXED_STREAM_MEDIA_TYPE_AUDIO_AND_VIDEO);
                regions[index] = region;
            }
        }
        return regions;
    }

    final IMixedStreamObserver mixedStreamObserver = new IMixedStreamObserver() {
        @Override
        public boolean isSupportClientPushStream() {
            ToastUtil.showToast(CDNStreamActivity.this, "isSupportClientPushStream");
            return false;
        }

        @Override
        public void onMixingEvent(ByteRTCStreamMixingEvent eventType, String taskId, ByteRTCTranscoderErrorCode error, MixedStreamType mixType) {
            String msg = String.format("onMixingEvent, type:%s, taskId:%s, error:%s, mixType:%s", eventType.toString(), taskId, error.toString(), mixType.toString());
            Log.d(TAG, msg);
            ToastUtil.showLongToast(CDNStreamActivity.this, msg);
        }

        @Override
        public void onMixingAudioFrame(String taskId, byte[] audioFrame, int frameNum, long timeStampMs) {
            String msg = String.format(Locale.ENGLISH, "onMixingEvent, taskId:%s, frameNum:%d, timeStampMs:%d", taskId, frameNum, timeStampMs);
            Log.d(TAG, msg);
            ToastUtil.showLongToast(CDNStreamActivity.this, msg);
        }

        @Override
        public void onMixingVideoFrame(String taskId, VideoFrame videoFrame) {
            String msg = String.format("onMixingVideoFrame, taskId:%s", taskId);
            Log.d(TAG, msg);
            ToastUtil.showLongToast(CDNStreamActivity.this, msg);
        }

        @Override
        public void onMixingDataFrame(String taskId, byte[] dataFrame, long time) {
            String msg = String.format("onMixingDataFrame, taskId:%s", taskId);
            Log.d(TAG, msg);
            ToastUtil.showLongToast(CDNStreamActivity.this, msg);
        }

        @Override
        public void onCacheSyncVideoFrames(String taskId, String[] userIds, VideoFrame[] videoFrame, byte[][] dataFrame, int count) {
            String msg = String.format("onCacheSyncVideoFrames, taskId:%s", taskId);
            Log.d(TAG, msg);
            ToastUtil.showLongToast(CDNStreamActivity.this, msg);
        }
    };

    final IRTCRoomEventHandler rtcRoomEventHandler = new IRTCRoomEventHandler() {
        @Override
        public void onRoomStateChanged(String roomId, String uid, int state, String extraInfo) {
            super.onRoomStateChanged(roomId, uid, state, extraInfo);
            String info = String.format(Locale.ENGLISH, "roomId:%s, uid:%s, state:%d, extraInfo:%s", roomId, uid, state, extraInfo);
            ToastUtil.showLongToast(CDNStreamActivity.this, info);
        }

        @Override
        public void onUserPublishStream(String uid, MediaStreamType type) {
            super.onUserPublishStream(uid, type);
            Log.i(TAG, "onUserPublishStream, uid:" + uid);
            runOnUiThread(() -> setRemoteRenderView(uid));
        }

        @Override
        public void onUserUnpublishStream(String uid, MediaStreamType type, StreamRemoveReason reason) {
            super.onUserUnpublishStream(uid, type, reason);
            runOnUiThread(() -> removeRemoteView(uid));
        }

        @Override
        public void onUserJoined(UserInfo userInfo, int elapsed) {
            super.onUserJoined(userInfo, elapsed);
            Log.i(TAG, "onUserJoined, uid:" + userInfo.getUid());
            ToastUtil.showToast(CDNStreamActivity.this, "onUserJoined, uid:" + userInfo.getUid());
            userNameList.add(userInfo.getUid());
        }

        @Override
        public void onUserLeave(String uid, int reason) {
            super.onUserLeave(uid, reason);
            userNameList.remove(uid);
        }

        @Override
        public void onLeaveRoom(RTCRoomStats stats) {
            super.onLeaveRoom(stats);
            ToastUtil.showLongToast(CDNStreamActivity.this, "onLeaveRoom, stats:" + stats.toString());
        }
    };

    IRTCVideoEventHandler videoEventHandler = new IRTCVideoEventHandler() {
    };

    @Override
    protected void onDestroy() {
        super.onDestroy();
        leaveRoom();
        if (rtcVideo != null) {
            rtcVideo.stopAudioCapture();
            rtcVideo.stopVideoCapture();
            stopPushCDNStream();
        }
        RTCVideo.destroyRTCVideo();
        rtcVideo = null;
    }

}